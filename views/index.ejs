<!DOCTYPE html>
<html lang='en'>

<head>
  <%- include('partials/head') %> 
  <link rel='stylesheet' href='css/mews.css'>
  <link rel='stylesheet' href='css/rockPaperScissor.css'>
</head>

<body>
<%- include('partials/nav') %>
    <div id='canvasDiv'></div>    

    <div class="background-container d-flex justify-content-center align-items-center" style="height: 100vh">
        <div class="text-center">
         
            <div class='col sm-8 topDiv'>
                <img class="mb-4" src="img/favicon.ico" style="width: 250px; "  />

                <div class="">
                    <br>
                    <h3> Welcome to Special Blend Production</h3>
                    <br>
                    <h3> A mix of visuals, data gathering and games mini-projects using node.js with express, mosquitto mqtt, p5.js and WebGL. </h3> 
                    <br>
                    <br>
                    <br>
                    <a href="/index">
                        <button type="button" class="btn btn-outline-success" data-mdb-ripple-init data-mdb-ripple-color="dark">Engage interactive eXperience</button>
                    </a>
                </div> 
            </div>  
       
        </div>
      </div>

      


<div id='page-top' class=' content-wrapper bg-transparent'>
<div class='container-fluid text-center '>  
<!-- Begin Container  -->  
  
    <div id=screen_id></div>
    <div id='speech'>-</div>


    <div class="row px-5" id="projectsDiv">

        <div class="col-sm-6 mt-4 ">
            <div class='card bg-transparent h-100 my-5'>
                <div class='card-header '> <h1>Earth Explorer</h1> </div>
                <a href="/earth" class="navbar-left"> <img src='img/earth3d.png' class="card-img-top p-4" alt='' > </a>
                <h5 class="card-title pt-2 px-2">2D & 3D visualisations of ISS, earthquakes, temperature and localisation</h5> 
            </div> 
        </div>
        
        <div class="col-sm-6 mt-4 ">
            <div class='card  bg-transparent h-100 my-5'>
                <div class='card-header '> <h1>Nature of Code</h1> </div>
                <a href="/Projects/Nature of Code/sAll" class="navbar-left"> <img src='img/flocking.png' class="card-img-top p-4" alt='' > </a> 
                <h5 class="card-title pt-2 px-2">Flocking Simulation via forces and behavior</h5>
            </div> 
        </div>

        <div class="col-sm-6 mt-4 ">
            <div class='card bg-transparent h-100 my-5'>
                <div class='card-header '> <h1>Shared Canvas</h1> </div>
                <a href="/Projects/DrawTogether" class="navbar-left"> <img src='img/canvas.png' class="card-img-top p-4" alt='' > </a> 
                <h5 class="card-title pt-2 px-2">p5.js drawing canvas shared via MQTT</h5>
            </div> 
        </div>

        <div class="col-sm-6 mt-4 ">
            <div class='card bg-transparent h-100 my-5'>
                <div class='card-header '> <h1>Nature of Code</h1> </div>   
                <a href="/Projects/Nature of Code/s5" class="navbar-left"> <img src='img/NoC.Evolve.png' class="card-img-top p-4" alt='' > </a> 
                <h5 class="card-title pt-2 px-2">DNA concept & leaf color evolution</h5>
            </div> 
        </div>


        <!-- Game                    TODO: a mettre dans un .ejs a part    -->
        <div class="col-sm-6 mt-2 ">   
            <div class='card bg-transparent h-100 my-5'>
                <div class='card-header '> <h1>Rock Paper Scissors</h1> </div>
            
                <div class='score-board'>
                    <div id='user-label' class='badge'>user</div>
                    <div id='computer-label' class='badge'>comp</div>
                    <span id='user-score'>0</span>:<span id='computer-score'>0</span>
                </div>
        
                <div class='result'> <p></p> </div>
            
                <div class='choices'>
                    <div class='choice' id='r'> <img src='img/rock.png' alt=''> </div>
                    <div class='choice' id='p'> <img src='img/paper.png' alt=''> </div>
                    <div class='choice' id='s'> <img src='img/scissors.png' alt=''> </div>
                </div>
            
                <p id='action-message'>Why not play with me? </p>
            </div>  
        </div>




    </div>



 <!--     Visitor Book   -->   
    <div class='row mt-5'>
        <div class='col sm-11'></div>  
        <div class='col sm-1 text-right'>
            <div class='h6 text-muted small'>  HitCount: <%- hitCount %>  </div> 
        </div>     
    </div>  

    <div>
        <hr />
        <h3>Leave your mark!</h3>
        <form class='mew-form  mb-3 '>
            <div class='error-message '></div>
            <label for='name'>Name</label>
            <input class='form-control' type='text' id='name' name='name'>
            <label for='content'>Post</label>
            <textarea class='form-control' type='text' id='content' name='content'></textarea>
            <button class='form-control bg-warning my-1' id='poster'>Say Hi!</button>
        </form>
        <div class='mews'></div>
        <div class='button-container'>
        <!-- <button id='loadMoreButton' class='button-primary' style='visibility: hidden'>Load More Mews</button> -->
            <p id='loadMore'>Loading...</p>
        </div>
        <div class='loading'>
            <img src='img/loading.gif' alt=''>
        </div>
    </div>



            
    <div class="card text-left">  
        <p id='ip_id'></p> 
       <!--  <img src="" id='rainbow' width ="480" />    -->
</div>



<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fa fa-angle-up"></i>
</a>
 <!-- End Container  -->
</div>
</div>



<!-- MDB -->
<script type="text/javascript" src="js/mdb.umd.min.js"></script>

<!-- Tools -->
<script src="js/tools.js"></script>

<%- include('partials/p5') %> 
<script type='text/javascript' src='js/p5.speech.js'></script>
<script type='text/javascript' src='js/nestor.js'></script>
<script type='text/javascript' src='js/rockPaperScissor.js'></script>


<script>
// Ensure MDBootstrap components are initialized
document.addEventListener('DOMContentLoaded', function() {
  // Initialize tooltips
  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-mdb-toggle="tooltip"]'))
  var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new mdb.Tooltip(tooltipTriggerEl)
  })

  getUserInfo()
});




async function getUserInfo()
{
    const info = await Tools.ipLookUp()
    document.getElementById('ip_id').innerHTML =  "<pre>"+JSON.stringify(info,null, '\t') +"</pre>"
} 




  //    WALKER
  function Walker() {
  
  // Start Walker in center with 0 velocity
  this.pos = createVector(width / 2, height / 8)
  this.vel = createVector(0, 0)
  this.acc = createVector(0, 0)
  this.color = color(0,0,0) // 
  
  // Sets the color used in render()
  this.setColor = function(newColor) {
      this.color = newColor
  }
  // Loop - Display Walker on canvas  
  this.render = function() {
      stroke(this.color)
      fill(this.color)
      rect(this.pos.x, this.pos.y, 3, 3, 20);
  }
  
  // Loop - Actualize Walker position chasing a random ghost position.
  this.update = function() 
  {
      // Vector at random OnScreen location
      var scrpos = createVector(floor(random(0,width)), floor(random(0, height)))
      // Vector pointing from Walker to OnScreen pos
      this.acc = p5.Vector.sub(scrpos, this.pos);
      // Setting the magnitude of that vector
      this.acc.setMag(0.4);
       // Physics engine algorithm
      this.vel.add(this.acc);
      this.pos.add(this.vel);
      // Keep walker On Screen
      this.pos.x = constrain(this.pos.x, 0, width - 1);
      this.pos.y = constrain(this.pos.y, 0, height - 1);
  }
}
//  PARTICLE
class Particle {
  constructor(startX, startY) {
    this.x = startX;
    this.y = startY;
    this.vx = random(-1,1);
    this.vy = random(-1,3);
    this.d = random(15, 35);
    this.acc = 0.1;
    this.alpha = 255;
  }
  update() {
    this.vy = this.vy - this.acc;
    this.x += this.vx;
    this.y += this.vy;
    this.alpha -= 4;
  }
  isFinished() {
    return this.alpha < 30;
  }
  show() {
    noStroke();
    fill(255, random(80,190), 0,this.alpha);
    circle(this.x, this.y, this.d)
  }
  show1(colorX, colorY){
    noStroke();
    fill(colorX, random(80,190), colorY, this.alpha);
    circle(this.x, this.y, this.d)
  }
  show2(colorX, colorY){
    noStroke();
    fill(random(80,190), colorX, colorY, this.alpha);
    circle(this.x, this.y, this.d)
  }
}
// SKETCH
let particles = [];
let particles2 = [];
let particles3 = [];
let walker, walker2, walker3;

let mouth;


function setup() 
{

    //  WALKER  
    let canvas = createCanvas(windowWidth, windowHeight);
    canvas.parent('canvasDiv');
    //create walker
    walker = new Walker();
    walker2 = new Walker(); 
    walker3 = new Walker(); 


    // NESTOR
    //let lang = navigator.language || 'fr-FR'   //  'en-US'
    let lang = 'en-US'
    console.log('language: ' + lang)
   // let speechRec = new p5.SpeechRec(lang, gotSpeech)
    //let continuous = true
    //speechRec.start(continuous, false)
    //speechRec.start()

    mouth = new p5.Speech(); // speech synthesis object   
    mouth.onLoad = voiceReady;


}
 

function gotSpeech() 
{
    if(speechRec.resultValue){
    
        let p = createP(speechRec.resultString);
        let d = document.getElementById('speech')
        d.innerHTML = p
        console.log("SpeechRec: ",  p)
        //p.parent(document.getElementById('speech'))
        //createP(speechRec.resultString);
    }
    else {
    let p = createP(speechRec)
    p.parent(document.getElementById('speech'))
    console.log("SpeechRec: ",  speechRec)
    }
}




 
function voiceReady() 
{
   console.log('Speech recognition supported 😊')
   console.log('Voices: ', mouth.voices) 
   mouth.setVoice(1)
   mouth.setRate(1)
   mouth.setPitch(1)

   mouth.speak('How you doinnn?'); // say something

  // mouth.setVoice(6)
// mouth.speak('Caâlisss de tabârnack... Quessé tu fais la encore?'); // say something
}







function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
}
function draw() 
{
   
   // background(239,222,205);
    clear();
 
    walker.update();
    walker2.update();
    walker3.update();
    for (let i = 0; i < 2; i++) {
        let p = new Particle(walker.pos.x, walker.pos.y);
        particles.push(p);
    }
    for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].show();
        if (particles[i].isFinished()) {
            particles.splice(i, 1);
        }
    }  
    for (let i = 0; i < 2; i++) {
        let p2 = new Particle(walker2.pos.x, walker2.pos.y);
        particles2.push(p2);
    }
    for (let i = particles2.length - 1; i >= 0; i--) {
        particles2[i].update();
        particles2[i].show2(walker2.pos.x, walker2.pos.y);
        if (particles2[i].isFinished()) {
            particles2.splice(i, 1);
        }
    }
    for (let i = 0; i < 2; i++) {
        let p3 = new Particle(walker3.pos.x, walker3.pos.y);
        particles3.push(p3);
    }
    for (let i = particles3.length - 1; i >= 0; i--) {
        particles3[i].update();
        particles3[i].show1(walker3.pos.y, walker3.pos.x);
        if (particles3[i].isFinished()) {
            particles3.splice(i, 1);
        }
    }
   
}







const form = document.querySelector('form'); // grabbing an element on the page
const errorElement = document.querySelector('.error-message');
const loadingElement = document.querySelector('.loading');
const mewsElement = document.querySelector('.mews');
const loadMoreElement = document.querySelector('#loadMore');

const localUrl =  <%- JSON.stringify(localUrl) %>;
console.log('localUrl', localUrl)
//const API_URL = (window.location.hostname === '127.0.0.1' || window.location.hostname === 'localhost') ? 'http://localhost:3001/meows/v2/mews' : 'https://meower-api.now.sh/v2/mews';
const LOCAL_URL =  localUrl + '/meows/v2/mews' 


let skip = 0;
let limit = 20;  //   TODO:  si le limit est plus petit que window et y apas de scroll....   le scroll event launch pas
let loading = false;
let finished = false;

errorElement.style.display = 'none';

document.addEventListener('scroll', () => {
  const rect = loadMoreElement.getBoundingClientRect();
  if (rect.top < window.innerHeight && !loading && !finished) {
    loadMore();
  }
});

listAllMews();

form.addEventListener('submit', (event) => {
  event.preventDefault();
  const formData = new FormData(form);
  const name = formData.get('name');
  const content = formData.get('content');

  if (name.trim() && content.trim()) {
    errorElement.style.display = 'none';
    form.style.display = 'none';
    loadingElement.style.display = '';

    const mew = {
      name,
      content
    };
    
    fetch(LOCAL_URL, {
      method: 'POST',
      body: JSON.stringify(mew),
      headers: {
        'content-type': 'application/json'
      }
    }).then(response => {      
      if (!response.ok) {
        const contentType = response.headers.get('content-type');
        if (contentType.includes('json')) {
          return response.json().then(error => Promise.reject(error.message));
        } else {
          return response.text().then(message => Promise.reject(message));
        }
      }
    }).then(() => {
      form.reset();
      setTimeout(() => {
        form.style.display = '';
      }, 10000);
      setTimeout(listAllMews, 1500) //  timeout prevent to launch before rateLimit  ..  TODO: weird    //listAllMews();
    }).catch(errorMessage => {
      form.style.display = '';
      errorElement.textContent = errorMessage;
      errorElement.style.display = '';
      loadingElement.style.display = 'none';
    });
  } else {
    errorElement.textContent = 'Name and content are required!';
    errorElement.style.display = '';
  }
});

function loadMore() {
  skip += limit;
  listAllMews(false);
}

function listAllMews(reset = true) {
  loading = true;
  if (reset) {
    console.log('reset')
    mewsElement.innerHTML = '';
    skip = 0;
    finished = false;
  }

  const url = `${LOCAL_URL}?skip=${skip}&limit=${limit}`

 const options =  {
    method: 'GET', // *GET, POST, PUT, DELETE, etc.
    mode: 'no-cors'/*  , // cors, no-cors, *cors, same-origin
    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
    credentials: 'same-origin', // include, *same-origin, omit
    headers: {
      'Content-Type': 'application/json'
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    redirect: 'follow', // manual, *follow, error
    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    body: JSON.stringify(data) // body data type must match 'Content-Type' header
    */
  }


  fetch(url, {options})
    .then(response => response.json())
    .then(result => {
      result.mews.forEach(mew => {
        const div = document.createElement('div');
        
        const r = document.createElement('div');
        r.classList.add('row')
        const col1 = document.createElement('div');
        col1.classList.add('col-sm-3')
        
        const header = document.createElement('h4');
        header.textContent = mew.name;
        
       
        const col2 = document.createElement('div');
        col2.classList.add('col-sm-9')

        const contents = document.createElement('p');
        contents.textContent = mew.content;

        const date = document.createElement('small');
        date.textContent = new Date(mew.created);


        col1.appendChild(header)
        col2.appendChild(contents);
        col2.appendChild(date);
        r.appendChild(col1)
        r.appendChild(col2)
        div.appendChild(r);
      

        mewsElement.appendChild(div);
      });
      loadingElement.style.display = 'none';
      if (!result.meta.has_more) {
        loadMoreElement.style.visibility = 'hidden';
        finished = true;
      } else {
        loadMoreElement.style.visibility = 'visible';
      }
      loading = false;
    });
}
  </script>




</body>
</html>