<!DOCTYPE html>
<html lang="en">

<head>
  
  <%- include('partials/head') %> 
  
</head>

<style>
    #canvasDiv {
    position:absolute;  /*fixed */
    padding:0;
    margin:0;
    top:0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
} 


    
    .error-message {
      background: #ff9b9b;
      color: white;
      border-radius: 5px;
      padding: 10px;
    }
    
    .mew-form, .loading {
      width: 50%;
      margin: 0 auto;
    }
    
    .loading {
      text-align: center;
    }
    
    .mews {
      width: 60%;
      margin: 0 auto;
    }
    
    .mews > div {
      background: hsla(0, 0%, 95%, 80%);
      padding: 12px;
      border-radius: 4px;
    }
    
    .mews > div > h4 {
      word-wrap: break-word;
    }
    
    .mews > div > p {
      word-wrap: break-word;
    }
    
    .mews > div:not(:last-child) {
      margin-bottom: 8px;
    }
    
    .button-container {
      display: flex;
      justify-content: center;
      margin: 1em;
    }

</style>

<body class="fixed-nav sticky-footer bg-transparent " id="page-top">
<div id="canvasDiv" ></div>
<nav class="navbar navbar-expand-lg navbar-light bg-transparent fixed-top" id="mainNav">    <%- include('partials/nav') %>  </nav>

<div class="content-wrapper bg-transparent">
<div class="container-fluid text-center ">  
 <!-- Begin Container  -->  
  
  <div id=screen_id></div>
  <div id='speech'></div>

    <div class="row">
        <div class="col sm-8">
            <div>
                <!-- <row>
                    <image src="img/earth3d.png" height="80px"></image>
                </row> -->
                <row><h3> Welcome to a special blend of visuals, data gathering and games mini-projects using javascript and WebGL. </h3>
                </row>
                
            </div> 
        </div>  
        <div class="col sm-4">
            <div class='card m-5Â bg-transparent'>
                <h4><%= sysInfo.data.hostname %></h4>
                <div class='text-left ml-2'>
                    <p>
                    <small>
                    OS: <%= sysInfo.data.ver %> <%= sysInfo.data.arch %>  <%= sysInfo.data.platform %> platform version <%= sysInfo.data.release %> </br>
                    Free Memory:  <%= (sysInfo.data.freemem / 1000000000).toFixed(2) %>  /  <%= (sysInfo.data.totalmem / 1000000000).toFixed(2) %> Gb</br>
                    CPUs: <%= sysInfo.cpus.length %> <%= sysInfo.cpus[0].model %> at <%= sysInfo.cpus[0].speed %> speed
                    </small>
                    </p>
                </div>
            </div>

        </div>   
    </div>  


     
    <div class="row">
        <div class="col-sm-12">
           
        </div>

    </div>  

  
    <div class="row">
        <div class="col sm-11"></div>  
        <div class="col sm-1 text-right">
            <div class="h6 text-muted small">  HitCount: <%- hitCount %>  </div> 
        </div>     
    </div>  


    <div>
        <h3>Leave your mark!</h3>
        <form class="mew-form ">
            <div class="error-message "></div>
            <label for="name">Name</label>
            <input class="form-control" type="text" id="name" name="name">
            <label for="content">Post</label>
            <textarea class="form-control" type="text" id="content" name="content"></textarea>
            <button class="form-control bg-warning my-1" id="poster">Send Your Salutations</button>
        </form>
        <div class="mews"></div>
        <div class="button-container">
        <!-- <button id="loadMoreButton" class="button-primary" style="visibility: hidden">Load More Mews</button> -->
            <p id="loadMore">Loading...</p>
        </div>
        <div class="loading">
            <img src="img/loading.gif" alt="">
        </div>
    </div>

 <!-- End Container  -->
</div>
</div>


<%- include('partials/footer') %>

<%- include('partials/p5') %> 
<script type="text/javascript" src="js/p5.speech.js"></script>
<script type="text/javascript" src="js/nestor.js"></script>

</body>
</html>

<script>
  //    WALKER
  function Walker() {
  
  // Start Walker in center with 0 velocity
  this.pos = createVector(width / 2, height/2)
  this.vel = createVector(0, 0)
  this.acc = createVector(0, 0)
  this.color = color(0,0,0) // 
  
  // Sets the color used in render()
  this.setColor = function(newColor) {
      this.color = newColor
  }
  // Loop - Display Walker on canvas  
  this.render = function() {
      stroke(this.color)
      fill(this.color)
      rect(this.pos.x, this.pos.y, 3, 3, 20);
  }
  
  // Loop - Actualize Walker position chasing a random ghost position.
  this.update = function() 
  {
      // Vector at random OnScreen location
      var scrpos = createVector(floor(random(0,width)), floor(random(0, height)))
      // Vector pointing from Walker to OnScreen pos
      this.acc = p5.Vector.sub(scrpos, this.pos);
      // Setting the magnitude of that vector
      this.acc.setMag(0.4);
       // Physics engine algorithm
      this.vel.add(this.acc);
      this.pos.add(this.vel);
      // Keep walker On Screen
      this.pos.x = constrain(this.pos.x, 0, width - 1);
      this.pos.y = constrain(this.pos.y, 0, height - 1);
  }
}
//  PARTICLE
class Particle {
  constructor(startX, startY) {
    this.x = startX;
    this.y = startY;
    this.vx = random(-1,1);
    this.vy = random(-1,3);
    this.d = random(15, 35);
    this.acc = 0.1;
    this.alpha = 255;
  }
  update() {
    this.vy = this.vy - this.acc;
    this.x += this.vx;
    this.y += this.vy;
    this.alpha -= 4;
  }
  isFinished() {
    return this.alpha < 30;
  }
  show() {
    noStroke();
    fill(255, random(80,190), 0,this.alpha);
    circle(this.x, this.y, this.d)
  }
  show1(colorX, colorY){
    noStroke();
    fill(colorX, random(80,190), colorY, this.alpha);
    circle(this.x, this.y, this.d)
  }
  show2(colorX, colorY){
    noStroke();
    fill(random(80,190), colorX, colorY, this.alpha);
    circle(this.x, this.y, this.d)
  }
}
// SKETCH
let particles = [];
let particles2 = [];
let particles3 = [];
let walker, walker2, walker3;
function setup() 
{
  let canvas = createCanvas(windowWidth, windowHeight);
  canvas.parent('canvasDiv');
  //create walker
  walker = new Walker();
  walker2 = new Walker(); 
  walker3 = new Walker(); 
}
 
function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
}
function draw() 
{
   
   // background(239,222,205);
    clear();
 
    walker.update();
    walker2.update();
    walker3.update();
    for (let i = 0; i < 2; i++) {
        let p = new Particle(walker.pos.x, walker.pos.y);
        particles.push(p);
    }
    for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].show();
        if (particles[i].isFinished()) {
            particles.splice(i, 1);
        }
    }  
    for (let i = 0; i < 2; i++) {
        let p2 = new Particle(walker2.pos.x, walker2.pos.y);
        particles2.push(p2);
    }
    for (let i = particles2.length - 1; i >= 0; i--) {
        particles2[i].update();
        particles2[i].show2(walker2.pos.x, walker2.pos.y);
        if (particles2[i].isFinished()) {
            particles2.splice(i, 1);
        }
    }
    for (let i = 0; i < 2; i++) {
        let p3 = new Particle(walker3.pos.x, walker3.pos.y);
        particles3.push(p3);
    }
    for (let i = particles3.length - 1; i >= 0; i--) {
        particles3[i].update();
        particles3[i].show1(walker3.pos.y, walker3.pos.x);
        if (particles3[i].isFinished()) {
            particles3.splice(i, 1);
        }
    }
   
}







const form = document.querySelector('form'); // grabbing an element on the page
const errorElement = document.querySelector('.error-message');
const loadingElement = document.querySelector('.loading');
const mewsElement = document.querySelector('.mews');
const loadMoreElement = document.querySelector('#loadMore');

const apiUrl =  <%- JSON.stringify(apiUrl) %>;
//const API_URL = (window.location.hostname === '127.0.0.1' || window.location.hostname === 'localhost') ? 'http://localhost:3001/meows/v2/mews' : 'https://meower-api.now.sh/v2/mews';
const API_URL =  apiUrl + '/meows/v2/mews' 


let skip = 0;
let limit = 20;  //   TODO:  si le limit est plus petit que window et y apas de scroll....   le scroll event launch pas
let loading = false;
let finished = false;

errorElement.style.display = 'none';

document.addEventListener('scroll', () => {
  const rect = loadMoreElement.getBoundingClientRect();
  if (rect.top < window.innerHeight && !loading && !finished) {
    loadMore();
  }
});

listAllMews();

form.addEventListener('submit', (event) => {
  event.preventDefault();
  const formData = new FormData(form);
  const name = formData.get('name');
  const content = formData.get('content');

  if (name.trim() && content.trim()) {
    errorElement.style.display = 'none';
    form.style.display = 'none';
    loadingElement.style.display = '';

    const mew = {
      name,
      content
    };
    
    fetch(API_URL, {
      method: 'POST',
      body: JSON.stringify(mew),
      headers: {
        'content-type': 'application/json'
      }
    }).then(response => {      
      if (!response.ok) {
        const contentType = response.headers.get('content-type');
        if (contentType.includes('json')) {
          return response.json().then(error => Promise.reject(error.message));
        } else {
          return response.text().then(message => Promise.reject(message));
        }
      }
    }).then(() => {
      form.reset();
      setTimeout(() => {
        form.style.display = '';
      }, 10000);
      setTimeout(listAllMews, 1500) //  timeout prevent to launch before rateLimit  ..  TODO: weird    //listAllMews();
    }).catch(errorMessage => {
      form.style.display = '';
      errorElement.textContent = errorMessage;
      errorElement.style.display = '';
      loadingElement.style.display = 'none';
    });
  } else {
    errorElement.textContent = 'Name and content are required!';
    errorElement.style.display = '';
  }
});

function loadMore() {
  skip += limit;
  listAllMews(false);
}

function listAllMews(reset = true) {
  loading = true;
  if (reset) {
    console.log('reset')
    mewsElement.innerHTML = '';
    skip = 0;
    finished = false;
  }

  const url = `${API_URL}?skip=${skip}&limit=${limit}`

 const options =  {
    method: 'GET', // *GET, POST, PUT, DELETE, etc.
    mode: 'no-cors'/*  , // cors, no-cors, *cors, same-origin
    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
    credentials: 'same-origin', // include, *same-origin, omit
    headers: {
      'Content-Type': 'application/json'
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    redirect: 'follow', // manual, *follow, error
    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    body: JSON.stringify(data) // body data type must match "Content-Type" header
    */
  }


  fetch(url, {options})
    .then(response => response.json())
    .then(result => {
      result.mews.forEach(mew => {
        const div = document.createElement('div');
        
        const r = document.createElement('div');
        r.classList.add("row")
        const col1 = document.createElement('div');
        col1.classList.add('col-sm-3')
        
        const header = document.createElement('h4');
        header.textContent = mew.name;
        
       
        const col2 = document.createElement('div');
        col2.classList.add('col-sm-9')

        const contents = document.createElement('p');
        contents.textContent = mew.content;

        const date = document.createElement('small');
        date.textContent = new Date(mew.created);


        col1.appendChild(header)
        col2.appendChild(contents);
        col2.appendChild(date);
        r.appendChild(col1)
        r.appendChild(col2)
        div.appendChild(r);
      

        mewsElement.appendChild(div);
      });
      loadingElement.style.display = 'none';
      if (!result.meta.has_more) {
        loadMoreElement.style.visibility = 'hidden';
        finished = true;
      } else {
        loadMoreElement.style.visibility = 'visible';
      }
      loading = false;
    });
}
  </script>