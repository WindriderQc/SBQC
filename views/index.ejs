<!DOCTYPE html>
<html lang="en">

<head>
  
  <%- include('partials/head') %> 
 
  <script type="text/javascript" src="js/p5.speech.js"></script>
  <script type="text/javascript" src="js/nestor.js"></script>
  
</head>

<style>
    #canvasDiv {
    position:absolute;  /*fixed */
    padding:0;
    margin:0;

    top:0;
    left: 0;

    width: 100%;
    height: 100%;
    z-index: 0;
} 

</style>

<body class="fixed-nav sticky-footer bg-light " id="page-top">
    <div id="canvasDiv" ></div>
  <nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top" id="mainNav">    <%- include('partials/nav') %>  </nav>

  <div class="content-wrapper">
    <div class="container-fluid text-center">  

      <div class="text-right h6 text-muted small">  
        <br> HitCount: <%- hitCount %> 
      </div> 

      <h3><%= sysInfo.hostname %></h3><br>

      <div class="row">   

        <div class="col-sm-12">
          <!-- <div class="row"><iframe width="320" height="240" src="Projects/NOC/s1/index.html" frameborder="0" ></iframe></div>-->
          <h3>Sys Info</h3>
          <p><%= JSON.stringify(sysInfo) %></p>
        </div>  
    
      </div>

  <div id=screen_id></div>
 
  <div class="row">
    <div id='speech'></div>
       
         <!--   <iframe width="640" height="480" src="Projects/NOC/sAll/index.html" frameborder="0" ></iframe> -->
  </div>  

  


  
 <!-- End Container  -->
</div>
</div>


<%- include('partials/footer') %>
</body>
</html>

<script>

  //    WALKER

  function Walker() {
  
  // Start Walker in center with 0 velocity
  this.pos = createVector(width / 2, height/2)
  this.vel = createVector(0, 0)
  this.acc = createVector(0, 0)
  this.color = color(0,0,0) // 
  
  // Sets the color used in render()
  this.setColor = function(newColor) {
      this.color = newColor
  }


  // Loop - Display Walker on canvas  
  this.render = function() {
      stroke(this.color)
      fill(this.color)
      rect(this.pos.x, this.pos.y, 3, 3, 20);
  }
  
  // Loop - Actualize Walker position chasing a random ghost position.
  this.update = function() 
  {
      // Vector at random OnScreen location
      var scrpos = createVector(floor(random(0,width)), floor(random(0, height)))
      // Vector pointing from Walker to OnScreen pos
      this.acc = p5.Vector.sub(scrpos, this.pos);
      // Setting the magnitude of that vector
      this.acc.setMag(0.4);

       // Physics engine algorithm
      this.vel.add(this.acc);
      this.pos.add(this.vel);

      // Keep walker On Screen
      this.pos.x = constrain(this.pos.x, 0, width - 1);
      this.pos.y = constrain(this.pos.y, 0, height - 1);
  }
}




//  PARTICLE

class Particle {

  constructor(startX, startY) {
    this.x = startX;
    this.y = startY;
    this.vx = random(-1,1);
    this.vy = random(-1,3);
    this.d = random(15, 35);
    this.acc = 0.1;
    this.alpha = 255;


  }

  update() {
    this.vy = this.vy - this.acc;
    this.x += this.vx;
    this.y += this.vy;
    this.alpha -= 4;
  }

  isFinished() {
    return this.alpha < 30;
  }

  show() {
    noStroke();
    fill(255, random(80,190), 0,this.alpha);
    circle(this.x, this.y, this.d)
  }

  show1(colorX, colorY){
    noStroke();
    fill(colorX, random(80,190), colorY, this.alpha);
    circle(this.x, this.y, this.d)
  }

  show2(colorX, colorY){
    noStroke();
    fill(random(80,190), colorX, colorY, this.alpha);
    circle(this.x, this.y, this.d)
  }

}




// SKETCH

let particles = [];
let particles2 = [];
let particles3 = [];
let walker, walker2, walker3;

function setup() 
{
  let canvas = createCanvas(windowWidth, windowHeight);
  canvas.parent('canvasDiv');

  //create walker
  walker = new Walker();
  walker2 = new Walker(); 
  walker3 = new Walker(); 
}
 
function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
}

function draw() 
{
   
   // background(239,222,205);
    clear();
 
    walker.update();
    walker2.update();
    walker3.update();


    for (let i = 0; i < 2; i++) {
        let p = new Particle(walker.pos.x, walker.pos.y);
        particles.push(p);
    }
    for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].show();
        if (particles[i].isFinished()) {
            particles.splice(i, 1);
        }
    }  

    for (let i = 0; i < 2; i++) {
        let p2 = new Particle(walker2.pos.x, walker2.pos.y);
        particles2.push(p2);
    }
    for (let i = particles2.length - 1; i >= 0; i--) {
        particles2[i].update();
        particles2[i].show2(walker2.pos.x, walker2.pos.y);
        if (particles2[i].isFinished()) {
            particles2.splice(i, 1);
        }
    }

    for (let i = 0; i < 2; i++) {
        let p3 = new Particle(walker3.pos.x, walker3.pos.y);
        particles3.push(p3);
    }
    for (let i = particles3.length - 1; i >= 0; i--) {
        particles3[i].update();
        particles3[i].show1(walker3.pos.y, walker3.pos.x);
        if (particles3[i].isFinished()) {
            particles3.splice(i, 1);
        }
    }
   
}

  </script>