<!DOCTYPE html>
<html lang="en">

<head>   
        <%- include('partials/mainHead', { title: 'SBQC ' }) %> 
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"    integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="    crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"    integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="    crossorigin=""></script>
        <style>
            .arrow {
                width: 0;
                height: 0;
                border-left: 10px solid transparent;
                border-right: 10px solid transparent;
                border-bottom: 20px solid black;
                transform-origin: center;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) rotate(0deg);
            }
            
            .wind-container {
                position: relative;
                width: 100px;
                height: 100px;
                margin: 0 auto;
            }
            
            .cardinal-points {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
            }
            
            .cardinal-points .north {
                position: absolute;
                top: 0;
                left: 50%;
                transform: translateX(-50%);
            }
            
            .cardinal-points .east {
                position: absolute;
                top: 50%;
                right: 0;
                transform: translateY(-50%);
            }
            
            .cardinal-points .south {
                position: absolute;
                bottom: 0;
                left: 50%;
                transform: translateX(-50%);
            }
            
            .cardinal-points .west {
                position: absolute;
                top: 50%;
                left: 0;
                transform: translateY(-50%);
            }
            </style>

    </head>


<body class="fixed-nav sticky-footer bg-light sidenav-toggled" id="page-top">
  
<%- include('partials/nav') %>

<div class="content-wrapper">
<div class="container-fluid bg-3 text-center">  
<!-- Begin Container  -->      
        
<div class="card mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-6">
                <div class="wind-container">
                    <div id="wind-arrow" class="arrow"></div>
                    <div class="cardinal-points">
                        <div class="north">N</div>
                        <div class="east">E</div>
                        <div class="south">S</div>
                        <div class="west">W</div>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div>Speed: <span id="wind-speed"></span> m/s</div>
                <div>Gust: <span id="wind-gust"></span> m/s</div>
            </div>
        </div>
    </div>
</div>

        <p>
            At location: <span id="summary"></span> with a temperature of <span id="temp"></span>&deg; C. <br>
            Concentration of particulate matter - (<span id="aq_parameter"></span>) <span id="aq_value"></span> <span id="aq_units"></span> <br>
            <small> Last read on <span id="aq_date"></span></small> 
        </p>  


        <div class="card mb-3">
                <div class="card-title">3D Viewer</div>
                <div class="card-body" >
                        <div id="sketch-holder">
                </div>
                <div class="card-footer small text-muted">Press 's' to save canvas to png  </div>
        </div>



        <div class="card mb-3">
                <div class="card-body" >
                        <p>ISS location -  lat: <span id="isslat"></span>&deg; lon: <span id="isslon"></span>&deg; </p>
                        <p>Client location -  lat: <span id="clat"></span>&deg; lon: <span id="clon"></span>&deg;</span> </p>
                        <div id='issMap' style="height:720px;"></div>
                </div>
                <div class="card-footer small text-muted">  </div>
        </div>


      
           
<!-- End Container  -->
</div>
</div>
</div>
<div id="ip_id"></div>

<%- include('partials/footer') %>

<%- include('partials/p5') %>


<script src="/js/earth3D.js"></script>

<script>

let iss   // International Space Station location     


let socket = io();  //  connect to the server that sent this page

socket.on('connect', () => {
    console.log('Connected to server');
});

socket.on('iss', (data) => {
    iss = data;
    updateIssOnMap(iss.latitude, iss.longitude);
});


/*// can be used if socket.io does not work...   client-side only.  using socket.io with server livedata to minimize api call
async function getISS_location()
{
    iss = await Tools.data.iss_location();  //  uses https source     
    
}
getISS_location(); setInterval(getISS_location, 10000)
*/



// 2D interactive leaflet map

function setClientMarker(lat, lon) 
{
    clientMarker.setLatLng([lat, lon])
}

function setMap() 
{
    // Making a map and tiles
    const mymap = L.map('issMap').setView([0, 0], 1);
    const attribution = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';
    const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    const tiles = L.tileLayer(tileUrl, { attribution });
    tiles.addTo(mymap);

    // Making a marker with a custom icon
    const issIcon = L.icon({
        iconUrl: 'img/iss.png',
        iconSize: [50, 32],
        iconAnchor: [25, 16]
    });

    let clientMarker = L.marker([0, 0]).addTo(mymap);
    let marker = L.marker([0, 0], { icon: issIcon }).addTo(mymap);
    
    mymap.on('zoomend', function() {
        const zoom = mymap.getZoom() + 1;
        const w = 50 * zoom;
        const h = 32 * zoom;
        issIcon.options.iconSize = [w, h];
        issIcon.options.iconAnchor = [w / 2, h / 2];
        mymap.removeLayer(marker);
        let latlng = marker.getLatLng();
        marker = L.marker([0, 0], { icon: issIcon }).addTo(mymap);
        marker.setLatLng(latlng);
    });

    return ({mymap, clientMarker, marker})
}

async function updateGeoData()
{
        try {
                const {coords} = await Tools.geoLocate()
                //const url =`weather/${coords.latitude},${coords.longitude}`; //  using the server to get the weather data.  TODO:  use the client side weather api call...  or not!  lol
                const url =`api/weather/${coords.latitude},${coords.longitude}`; //  using the server to get the weather data.  TODO:  use the client side weather api call...  or not!  lol



                let lat, lon, alt, accuracy, weather, air  
                lat = coords.latitude
                lon = coords.longitude
                alt = coords.altitude
                accuracy = coords.accuracy  

                console.log('Your current position is:');
                console.log(`Latitude : ${lat}`);
                console.log(`Longitude: ${lon}`);
                console.log(`Altitude: ${alt}`);
                console.log(`More or less ${accuracy} meters.`);
                document.getElementById('clat').textContent = lat.toFixed(2);
                document.getElementById('clon').textContent = lon.toFixed(2);
                        
                setClientMarker(lat, lon)

                await fetch(url)
                        .then(resp => resp.json())
                        .then(data => {
                        
                                console.log(data) 
                                weather = data.weather.currently
                            

                                air = data.air_quality.results[0]
                                document.getElementById('summary').textContent = data.weather.weather[0].description   //   weather.summary 
                                document.getElementById('temp').textContent =  data.weather.main.feels_like  // weather.temperature
                                document.getElementById('aq_parameter').textContent = air.parameter.displayName
                                document.getElementById('aq_value').textContent = air.latest.value
                                document.getElementById('aq_units').textContent = air.parameter.units
                                document.getElementById('aq_date').textContent = air.latest.datetime.local

                                // Update wind information
                                const wind = data.weather.wind;
                                document.getElementById('wind-speed').textContent = wind.speed;
                                document.getElementById('wind-gust').textContent = wind.gust;
                                document.getElementById('wind-arrow').style.transform = `rotate(${wind.deg}deg)`;



                        })
                        .catch(e => {
                            Tools.cliError(e);
                            air = { value: -1 };
                            document.getElementById('aq_value').textContent = 'NO READING'   
                        })

        } catch(e) { alert('Error: '+e.message) }
        
}


const { mymap, clientMarker, marker } = setMap()

if(Tools.isGeoLocAvailable())  updateGeoData() 


let firstTime = true;

async function updateIssOnMap(lat, lon) 
{         
    const latitude = lat
    const longitude = lon
  
    marker.setLatLng([latitude, longitude])
    if (firstTime) {
            mymap.setView([latitude, longitude], 2)
            firstTime = false
    }

    document.getElementById('isslat').textContent = parseFloat(latitude).toFixed(2)
    document.getElementById('isslon').textContent = parseFloat(longitude).toFixed(2)
}











  async function getUserInfo()
{
    const info = await Tools.ipLookUp()
    document.getElementById('ip_id').innerHTML =  "<pre>"+JSON.stringify(info,null, '\t') +"</pre>"
} 
getUserInfo()


</script>

</body>
</html>