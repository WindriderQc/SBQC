<!DOCTYPE html>
<html lang="en">

<head>
        <%- include('partials/head') %> 
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"    integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="    crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"    integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="    crossorigin=""></script>
</head>


<body class="fixed-nav sticky-footer bg-light sidenav-toggled" id="page-top">
  
<nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top" id="mainNav">    <%- include('partials/nav') %>  </nav>

<div class="content-wrapper">
<div class="container-fluid bg-3 text-center">  
<!-- Begin Container  -->      
        
        <p>
                The weather here is <span id="summary"></span> with a temperature of <span id="temp"></span>&deg; C. <br>
                The concentration of particulate matter (<span id="aq_parameter"></span>) is <span id="aq_value"></span> <span id="aq_units"></span> <br>
                <small> Last read on <span id="aq_date"></span></small> 
        </p>  

        <div class="card mb-3">
                <div class="card-body" >
                        <p>ISS location -  lat: <span id="isslat"></span>&deg; lon: <span id="isslon"></span>&deg; </p>
                        <p>Client location -  lat: <span id="clat"></span>&deg; lon: <span id="clon"></span>&deg;</span> </p>
                        <div id='issMap' style="height:720px;"></div>
                </div>
                <div class="card-footer small text-muted">  </div>
        </div>


              
        <div class="card text-left">  
                 <p id='ip_id'></p> 
                <!--  <img src="" id='rainbow' width ="480" />    -->
        </div>
 
           
<!-- End Container  -->
</div>
</div>

<%- include('partials/footer') %>

<script>
/// <reference path="../p5.global-mode.d.ts" />

let lat = 0
let lon = 0
let accuracy = 0


let firstTime = true;

    // Making a map and tiles
const mymap = L.map('issMap').setView([0, 0], 1);
const attribution = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';
const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
const tiles = L.tileLayer(tileUrl, { attribution });
tiles.addTo(mymap);
// Making a marker with a custom icon
const issIcon = L.icon({
    iconUrl: 'img/iss.png',
    iconSize: [50, 32],
    iconAnchor: [25, 16]
});

let clientMarker = L.marker([0, 0]).addTo(mymap);
let marker = L.marker([lat, lon], { icon: issIcon }).addTo(mymap);
mymap.on('zoomend', function() {
    const zoom = mymap.getZoom() + 1;
    const w = 50 * zoom;
    const h = 32 * zoom;
    issIcon.options.iconSize = [w, h];
    issIcon.options.iconAnchor = [w / 2, h / 2];
    mymap.removeLayer(marker);
    let latlng = marker.getLatLng();
    marker = L.marker([0, 0], { icon: issIcon }).addTo(mymap);
    marker.setLatLng(latlng);
});

async function getISS() 
{
                const data = await Tools.getISS()
                //console.log(data)
                const { latitude, longitude } = data
                
                marker.setLatLng([latitude, longitude])
                if (firstTime) {
                mymap.setView([latitude, longitude], 2)
                firstTime = false
                }

                document.getElementById('isslat').textContent = latitude.toFixed(2)
                document.getElementById('isslon').textContent = longitude.toFixed(2)
}
getISS()
setInterval(getISS, 5000)

function setClientMarker(lat, lon) {
    clientMarker.setLatLng([lat, lon])
}


const getUserInfo = async () => {
        const info = await Tools.ipLookUp()
        document.getElementById('ip_id').innerHTML =  "<pre>"+JSON.stringify(info,null, '\t') +"</pre>"
} 
getUserInfo()




const updateGeoData = async () => {
        try {
        const {coords} = await Tools.geoLocate(),
        url =`weather/${coords.latitude},${coords.longitude}`; 
        
        let lat, lon, alt, accuracy, weather, air  
        lat = coords.latitude
        lon = coords.longitude
        alt = coords.altitude
        accuracy = coords.accuracy  

        console.log('Your current position is:');
        console.log(`Latitude : ${lat}`);
        console.log(`Longitude: ${lon}`);
        console.log(`Altitude: ${alt}`);
        console.log(`More or less ${accuracy} meters.`);
        document.getElementById('clat').textContent = lat.toFixed(2);
        document.getElementById('clon').textContent = lon.toFixed(2);
                
        setClientMarker(lat, lon)

        await fetch(url)
                .then(resp => resp.json())
                .then(data => {
                
                console.log(data) 
                weather = data.weather.currently
                
                /*if(data.air_quality.results["INO"]) {
                        for(measure of data.air_quality.results["INO"].measurements) {
                        if(measure["parameter"] == "um010") 
                                air = measure 
                }
                        for(measure of data.air_quality.results[0].measurements) {
                        if(measure["parameter"] == "um010") 
                        air = measure    
                }*/

                air = data.air_quality.results[0].measurements[0]
                document.getElementById('summary').textContent = data.weather.weather[0].description   //   weather.summary 
                document.getElementById('temp').textContent =  data.weather.main.feels_like  // weather.temperature
                document.getElementById('aq_parameter').textContent = air.parameter
                document.getElementById('aq_value').textContent = air.value
                document.getElementById('aq_units').textContent = air.unit
                document.getElementById('aq_date').textContent = air.lastUpdated

                })
                .catch(e => {
                Tools.cliError(e);
                air = { value: -1 };
                document.getElementById('aq_value').textContent = 'NO READING'    //  TODO: la mise a jour des document devrait etre ailleur que dans la fonction générique Tools.
                })

        } catch(e) { alert('Error: '+e.message) }
        
}

if(Tools.isGeoLocAvailable()) { updateGeoData() }  
     
</script>
</body>
</html>