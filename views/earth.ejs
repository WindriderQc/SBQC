<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('partials/mainHead', { title: 'SBQC Earth' }) %>
</head>

<body class="fixed-nav sticky-footer bg-light sidenav-toggled" id="page-top">

<%- include('partials/nav') %>

<div class="content-wrapper">
<div class="container-fluid bg-3 text-center">
    <!-- Begin Container -->

    <div class="card mb-3">
        <div class="card-body">
            <div class="row mb-4">
                <div class="col">
                    <div>Wind Speed: <span id="wind-speed">N/A</span> m/s</div>
                    <div>Wind Gust: <span id="wind-gust">N/A</span> m/s</div>
                        <p>
                            At location: <span id="summary">N/A</span> with a temperature of <span id="temp">N/A</span>&deg; C. <br>
                            Air Quality (<span id="aq_parameter">N/A</span>): <span id="aq_value">N/A</span> <span id="aq_units"></span>
                            <small>(Last read on <span id="aq_date">N/A</span>)</small>
                        </p>
                </div>
            </div>
            <div class="row">
                <%- include('partials/tides') %>
            </div>
            <hr>
            <div class="row">
                <%- include('partials/pressureGraph') %>
            </div>
        </div>
    </div>


    <%# Removed <div id="ip_id"></div> %>
</div>
</div>
</div>

<%- include('partials/footer') %>
<script src="/socket.io/socket.io.js"></script>
<script>
    // Page UI and Socket.IO Logic
    let clientLat = null;
    let clientLon = null;

    const socket = io();
    socket.on('connect', () => {
        console.log('Connected to server via Socket.IO');
    });

    async function fetchWeatherForCoords(lat, lon) {
        if (!lat || !lon) return;
        const url = `/api/weather/${lat},${lon}`;
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Weather API request failed with status ${response.status}`);
            const data = await response.json();
            document.getElementById('summary').textContent = data.weather.weather[0].description;
            document.getElementById('temp').textContent = data.weather.main.feels_like.toFixed(1);
            if (data.air_quality && data.air_quality.results && data.air_quality.results[0] && data.air_quality.results[0].latest) {
                const air = data.air_quality.results[0];
                document.getElementById('aq_parameter').textContent = air.parameter ? air.parameter.displayName : 'N/A';
                document.getElementById('aq_value').textContent = air.latest.value;
                document.getElementById('aq_units').textContent = air.parameter ? air.parameter.units : '';
                document.getElementById('aq_date').textContent = air.latest.datetime && air.latest.datetime.local ? air.latest.datetime.local : 'N/A';
            } else { document.getElementById('aq_value').textContent = 'NO READING'; }
            const wind = data.weather.wind;
            document.getElementById('wind-speed').textContent = wind.speed;
            document.getElementById('wind-gust').textContent = wind.gust || 'N/A';
        } catch (e) {
            console.error('Error fetching weather data:', e);
            document.getElementById('summary').textContent = 'Error';
            document.getElementById('temp').textContent = 'N/A';
            document.getElementById('aq_value').textContent = 'NO READING';
        }
    }

    async function setDefaultLocationAndFetchWeather() {
        console.log("Using default client location (Quebec City area).");
        clientLat = 46.8139; clientLon = -71.2080;
        await fetchWeatherForCoords(clientLat, clientLon);
    }

    async function updateGeoData() {
        if (typeof Tools === 'undefined' || !Tools.isGeoLocAvailable || !Tools.geoLocate) {
            console.log("Tools.js not available or complete. Using default location.");
            await setDefaultLocationAndFetchWeather(); return;
        }
        if (!Tools.isGeoLocAvailable()) {
            console.log("Geolocation not available in this browser.");
            await setDefaultLocationAndFetchWeather(); return;
        }
        try {
            console.log("Attempting to get live geolocation...");
            const { coords } = await Tools.geoLocate();
            clientLat = coords.latitude; clientLon = coords.longitude;
            console.log("Live geolocation successful:", clientLat, clientLon);
            await fetchWeatherForCoords(clientLat, clientLon);
        } catch (e) {
            console.warn('Error getting live geolocation or permission denied:', e.message);
            await setDefaultLocationAndFetchWeather();
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateGeoData();
    });
</script>

</body>
</html>
