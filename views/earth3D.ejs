<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('partials/mainHead', { title: 'SBQC ISS Tracker' }) %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/satellite.js/4.0.0/satellite.min.js"></script>
</head>

<body class="fixed-nav sticky-footer bg-light sidenav-toggled" id="page-top">

<%- include('partials/nav') %>

<div class="content-wrapper">
<div class="container-fluid bg-3 text-center">
    <!-- Begin Container -->

    <div class="card mb-3">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <div>Wind Speed: <span id="wind-speed">N/A</span> m/s</div>
                    <div>Wind Gust: <span id="wind-gust">N/A</span> m/s</div>
                </div>
            </div>
        </div>
    </div>

    <p>
        At location: <span id="summary">N/A</span> with a temperature of <span id="temp">N/A</span>&deg; C. <br>
        Air Quality (<span id="aq_parameter">N/A</span>): <span id="aq_value">N/A</span> <span id="aq_units"></span>
        <small>(Last read on <span id="aq_date">N/A</span>)</small>
    </p>

    <div class="card mb-3">
        <div class="card-body">
            <p>Next ISS pass-by: <span id="iss-passby-time">Calculating...</span></p>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">3D ISS Viewer</div>
        <div class="card-body">
            <div id="sketch-holder" style="display: flex; justify-content: center; align-items: center;">
                <!-- p5.js canvas will be parented here -->
            </div>
        </div>
        <div class="card-footer small text-muted">Press 'S' to save canvas to PNG.</div>
    </div>

    <div class="card mb-3" style="max-width: 1280px; margin: 0 auto;">
        <div class="card-header">Controls & Info</div>
        <div class="card-body">
            <p>ISS Location - Latitude: <span id="isslat">N/A</span>&deg;, Longitude: <span id="isslon">N/A</span>&deg;</p>
            <p>Client Location - Latitude: <span id="clat">N/A</span>&deg;, Longitude: <span id="clon">N/A</span>&deg;</p>
            <p id="default-location-msg" style="font-size: 0.8em; color: #777; display: none;">Using default client location as live geolocation is unavailable or denied.</p>
            
            <div style="padding: 10px; text-align: left; border-top: 1px solid #eee;">
                <strong>Legend (3D View):</strong>
                <div style="margin-top: 5px;">
                    <span style="background-color: orange; display: inline-block; width: 20px; height: 10px; margin-right: 5px; border: 1px solid #555;"></span> Historical ISS Path
                </div>
                 <div style="margin-top: 5px;">
                    <span style="background-color: #00FF00; display: inline-block; width: 20px; height: 10px; margin-right: 5px; border: 1px solid #555;"></span> Predicted ISS Path
                </div>
                <div style="margin-top: 5px;">
                    <span style="background-color: yellow; display: inline-block; width: 10px; height: 10px; margin-right: 5px; border: 1px solid #555; border-radius: 50%;"></span> Default Location (Quebec City)
                </div>
                 <div style="margin-top: 5px;">
                    <span style="background-color: rgba(0,100,255,0.3); display: inline-block; width: 20px; height: 10px; margin-right: 5px; border: 1px solid #555;"></span> Pass-by Detection Radius
                </div>
            </div>

            <div style="padding: 10px; text-align: left; border-top: 1px solid #eee;">
                <div>
                    <label for="pathLengthSlider">Historical Path Length: <span id="pathLengthValue">4200</span> points</label>
                    <input type="range" id="pathLengthSlider" min="100" max="4200" step="100" value="4200" style="width: 100%;">
                </div>
                <div style="margin-top: 10px;">
                    <label for="predictionLengthSlider">Prediction Length: <span id="predictionLengthValue">15</span> min</label>
                    <input type="range" id="predictionLengthSlider" min="5" max="360" step="5" value="15" style="width: 100%;">
                </div>
                <div style="margin-top: 10px;">
                    <label for="passByRadiusSlider">Pass-by Detection Radius: <span id="passByRadiusValue">1000</span> km</label>
                    <input type="range" id="passByRadiusSlider" min="100" max="5000" step="100" value="1000" style="width: 100%;">
                </div>
            </div>
        </div>
        <div class="card-footer small text-muted">
            <a href="https://eyes.nasa.gov/apps/solar-system/#/home" target="_blank" class="btn btn-outline-primary">Explore with NASA Eyes</a>
        </div>
    </div>
    <%# Removed <div id="ip_id"></div> %>
</div>
</div>
</div>

<%- include('partials/footer') %> <%# This should load tools.js %>
<script src="/socket.io/socket.io.js"></script>
<%- include('partials/p5') %>
<%# <script src="/js/tools.js"></script> <!-- REMOVED - Loaded in footer --> %>
<script src="/js/earth3D.js"></script>

<script>
   window.ISSOrbitPredictor = (function () {
       const TLE_URL = 'https://celestrak.com/NORAD/elements/stations.txt';
       let predictionIntervalSec = 10; // Made let for potential future config
       let predictionDurationSec = 5400; // 90 mins, made let for setter
       let radiusKM = 1000; // Made let for setter
       const targetLat = 46.8139; // Default target (Quebec City)
       const targetLon = -71.2080;
       let satrec; // Stores the satellite record from TLE

       async function fetchTLE() {
           try {
               const res = await fetch(TLE_URL);
               if (!res.ok) throw new Error(`Failed to fetch TLE: ${res.status}`);
               const txt = await res.text();
               const lines = txt.split('\n');
               // Find ISS TLE lines (more robustly)
               const i = lines.findIndex(l => l.includes('ISS (ZARYA)') || l.includes('ISS'));
               if (i >= 0 && lines[i+1] && lines[i+2]) {
                   satrec = satellite.twoline2satrec(lines[i+1].trim(), lines[i+2].trim());
                   console.log("[ISSOrbitPredictor] Fetched new TLE for ISS.");
               } else {
                   console.error("[ISSOrbitPredictor] Could not parse TLE from fetched text.");
                   satrec = null;
               }
           } catch (error) {
               console.error("[ISSOrbitPredictor] Error fetching TLE:", error);
               satrec = null;
           }
       }

       function positionAt(time) {
           if (!satrec) return null;
           try {
               const propagateResult = satellite.propagate(satrec, time);
               if (!propagateResult || !propagateResult.position) {
                   // console.warn('[ISSOrbitPredictor] Propagation failed for time:', time);
                   return null; 
               }
               const { position } = propagateResult;
               const gmst = satellite.gstime(time);
               const geodetic = satellite.eciToGeodetic(position, gmst);
               return {
                   lat: geodetic.latitude * 180 / Math.PI,
                   lon: geodetic.longitude * 180 / Math.PI,
                   alt: geodetic.height
               };
           } catch (e) {
               console.error("[ISSOrbitPredictor] Error in positionAt or propagate:", e);
               return null;
           }
       }

       function haversineDistance(lat1, lon1, lat2, lon2) {
           const R = 6371; // Earth radius in km
           const toRad = angle => angle * Math.PI / 180;
           const dLat = toRad(lat2 - lat1);
           const dLon = toRad(lon2 - lon1);
           const a = Math.sin(dLat/2)**2 +
                     Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                     Math.sin(dLon/2)**2;
           return 2 * R * Math.asin(Math.sqrt(a));
       }

       async function generatePredictedPath() {
           if (!satrec) {
               console.log("[ISSOrbitPredictor] No TLE data (satrec), attempting to fetch...");
               await fetchTLE();
               if (!satrec) {
                   console.error("[ISSOrbitPredictor] TLE data still unavailable. Cannot generate path.");
                   if (window.earth3DSketch && typeof window.earth3DSketch.updatePredictedPath === 'function') {
                        window.earth3DSketch.updatePredictedPath([]);
                   }
                   return;
               }
           }

           const now = new Date();
           let predicted = [];
           let closest = null;
           let closestDistance = Infinity;
           const passByStatus = document.getElementById('iss-passby-time');

           for (let t = 0; t < predictionDurationSec; t += predictionIntervalSec) {
               const time = new Date(now.getTime() + t * 1000);
               const pos = positionAt(time);
               if (pos) {
                   predicted.push({ lat: pos.lat, lng: pos.lon, alt: pos.alt }); // lng for compatibility with update3DPredictedPath
                   const dist = haversineDistance(pos.lat, pos.lon, targetLat, targetLon);
                   if (dist < closestDistance) {
                       closestDistance = dist;
                       closest = { time, dist, ...pos };
                   }
               }
           }
           
           if (passByStatus) {
               if (closest && closest.dist < radiusKM) {
                   passByStatus.textContent = `Approx. pass at ${closest.time.toLocaleTimeString()} (distance ~${Math.round(closest.dist)} km). TLE based.`;
                   console.log(`[ISSOrbitPredictor PASS DETECTED] Closest pass at ${closest.time.toLocaleTimeString()} within ${Math.round(closest.dist)} km`);
               } else {
                   passByStatus.textContent = `No close pass predicted (within ${radiusKM}km for next ${predictionDurationSec/60}min). Closest ~${closestDistance.toFixed(0)}km. TLE based.`;
                   console.log(`[ISSOrbitPredictor No pass within ${radiusKM} km in next ${predictionDurationSec/60} mins]. Closest: ${closestDistance.toFixed(0)}km`);
               }
           }

           if (window.earth3DSketch && typeof window.earth3DSketch.updatePredictedPath === 'function') {
              window.earth3DSketch.updatePredictedPath(predicted);
           }
       }

       return {
           fetchAndPredict: async function () {
               await fetchTLE(); 
               if (satrec) {
                   await generatePredictedPath();
               } else {
                   console.error("[ISSOrbitPredictor] Cannot predict path due to TLE fetch/parse error.");
                   if (window.earth3DSketch && typeof window.earth3DSketch.updatePredictedPath === 'function') {
                       window.earth3DSketch.updatePredictedPath([]);
                   }
                   const passByStatus = document.getElementById('iss-passby-time');
                   if(passByStatus) passByStatus.textContent = 'Error fetching TLE data for prediction.';
               }
           },
           setPredictionDurationSec: function(duration) {
               if (typeof duration === 'number' && duration > 0) predictionDurationSec = duration;
               if (satrec) generatePredictedPath(); // Re-predict if TLE is available
           },
           setRadiusKM: function(rad) {
               if (typeof rad === 'number' && rad > 0) radiusKM = rad;
               if (satrec) generatePredictedPath(); // Re-predict for text update if TLE is available
           }
       };
   })();

    // Page UI and Socket.IO Logic

    let clientLat = null;
    let clientLon = null;
    
    // let pagePredictedIssPathPoints = []; // Now managed by ISSOrbitPredictor
    
    let lastPassByCheckTime = 0;
    const PASS_BY_CHECK_INTERVAL = 30000; 
    // let PASS_BY_THRESHOLD_KM = 1000; // Now managed by ISSOrbitPredictor (as radiusKM)
    // let predictionDurationSeconds = 15 * 60; // Now managed by ISSOrbitPredictor

    const socket = io();

    socket.on('connect', () => {
        console.log('Connected to server via Socket.IO');
    });

    socket.on('iss', (data) => {
        window.iss = data; 
        
        if (document.getElementById('isslat') && document.getElementById('isslon')) {
            document.getElementById('isslat').textContent = parseFloat(data.latitude).toFixed(2);
            document.getElementById('isslon').textContent = parseFloat(data.longitude).toFixed(2);
        }

        const now = Date.now();
        if (clientLat !== null && clientLon !== null && now - lastPassByCheckTime > PASS_BY_CHECK_INTERVAL) {
            // calculateAndDisplayPassBy(); // Old function, will be replaced by ISSOrbitPredictor logic
            // For now, prediction is triggered by sliders or initially.
            // To trigger on interval, ISSOrbitPredictor.fetchAndPredict() could be called here.
            // However, TLE fetching on interval might be too frequent.
            // The current ISSOrbitPredictor design re-predicts if parameters change via sliders.
            // A separate timer for fetchAndPredict() might be better if periodic refresh is needed.
            // For this step, we rely on initial call and slider changes.
            if (window.ISSOrbitPredictor) {
                // This will refetch TLE and predict. Consider if this is too frequent.
                // window.ISSOrbitPredictor.fetchAndPredict(); 
            }
            lastPassByCheckTime = now;
        }
    });

    async function fetchWeatherForCoords(lat, lon) {
        if (!lat || !lon) return;
        const url = `/api/weather/${lat},${lon}`;
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Weather API request failed with status ${response.status}`);
            const data = await response.json();
            document.getElementById('summary').textContent = data.weather.weather[0].description;
            document.getElementById('temp').textContent = data.weather.main.feels_like.toFixed(1);
            if (data.air_quality && data.air_quality.results && data.air_quality.results[0] && data.air_quality.results[0].latest) {
                const air = data.air_quality.results[0];
                document.getElementById('aq_parameter').textContent = air.parameter ? air.parameter.displayName : 'N/A';
                document.getElementById('aq_value').textContent = air.latest.value;
                document.getElementById('aq_units').textContent = air.parameter ? air.parameter.units : '';
                document.getElementById('aq_date').textContent = air.latest.datetime && air.latest.datetime.local ? air.latest.datetime.local : 'N/A';
            } else { document.getElementById('aq_value').textContent = 'NO READING'; }
            const wind = data.weather.wind;
            document.getElementById('wind-speed').textContent = wind.speed;
            document.getElementById('wind-gust').textContent = wind.gust || 'N/A';
        } catch (e) {
            console.error('Error fetching weather data:', e);
            document.getElementById('summary').textContent = 'Error';
            document.getElementById('temp').textContent = 'N/A';
            document.getElementById('aq_value').textContent = 'NO READING';
        }
    }

    async function setDefaultLocationAndFetchWeather() {
        console.log("Using default client location (Quebec City area).");
        clientLat = 46.8139; clientLon = -71.2080; 
        document.getElementById('clat').textContent = clientLat.toFixed(2);
        document.getElementById('clon').textContent = clientLon.toFixed(2);
        document.getElementById('default-location-msg').style.display = 'block';
        await fetchWeatherForCoords(clientLat, clientLon);
    }

    async function updateGeoData() {
        if (typeof Tools === 'undefined' || !Tools.isGeoLocAvailable || !Tools.geoLocate) {
            console.log("Tools.js not available or complete. Using default location.");
            await setDefaultLocationAndFetchWeather(); return;
        }
        if (!Tools.isGeoLocAvailable()) { 
            console.log("Geolocation not available in this browser.");
            await setDefaultLocationAndFetchWeather(); return;
        }
        try {
            console.log("Attempting to get live geolocation...");
            const { coords } = await Tools.geoLocate(); 
            clientLat = coords.latitude; clientLon = coords.longitude;
            console.log("Live geolocation successful:", clientLat, clientLon);
            document.getElementById('default-location-msg').style.display = 'none';
            document.getElementById('clat').textContent = clientLat.toFixed(2);
            document.getElementById('clon').textContent = clientLon.toFixed(2);
            await fetchWeatherForCoords(clientLat, clientLon);
        } catch (e) {
            console.warn('Error getting live geolocation or permission denied:', e.message);
            await setDefaultLocationAndFetchWeather();
        }
    }
    
// calculateAndDisplayPassBy() function is now removed and replaced by ISSOrbitPredictor module.

    document.addEventListener('DOMContentLoaded', () => {
        updateGeoData(); 

        const pathLengthSlider = document.getElementById('pathLengthSlider');
        const pathLengthValueSpan = document.getElementById('pathLengthValue');
        const predictionLengthSlider = document.getElementById('predictionLengthSlider');
        const predictionLengthValueSpan = document.getElementById('predictionLengthValue');
        const passByRadiusSlider = document.getElementById('passByRadiusSlider');
        const passByRadiusValueSpan = document.getElementById('passByRadiusValue');

        if (pathLengthSlider && pathLengthValueSpan) {
            pathLengthSlider.addEventListener('input', function() {
                pathLengthValueSpan.textContent = this.value;
                if (window.earth3DSketch && typeof window.earth3DSketch.setMaxHistoryPoints === 'function') {
                    window.earth3DSketch.setMaxHistoryPoints(parseInt(this.value)); 
                }
                // calculateAndDisplayPassBy(); // Old function call removed
                // Prediction is handled by ISSOrbitPredictor setters or its internal logic
            });
        }

        if (predictionLengthSlider && predictionLengthValueSpan) {
            predictionLengthSlider.addEventListener('input', function() {
                predictionLengthValueSpan.textContent = this.value;
                // predictionDurationSeconds = parseInt(this.value) * 60; // Old variable
                if (window.ISSOrbitPredictor) {
                    window.ISSOrbitPredictor.setPredictionDurationSec(parseInt(this.value) * 60);
                }
                // calculateAndDisplayPassBy(); // Old function call removed
            });
        }

        if (passByRadiusSlider && passByRadiusValueSpan) {
            passByRadiusSlider.addEventListener('input', function() {
                passByRadiusValueSpan.textContent = this.value;
                // PASS_BY_THRESHOLD_KM = parseInt(this.value); // Old variable for calculation
                if (window.ISSOrbitPredictor) {
                    window.ISSOrbitPredictor.setRadiusKM(parseInt(this.value));
                }
                if (window.earth3DSketch && typeof window.earth3DSketch.setSketchPassByRadiusKM === 'function') {
                    window.earth3DSketch.setSketchPassByRadiusKM(parseInt(this.value)); 
                }
                // calculateAndDisplayPassBy(); // Old function call removed
            });
        }

        if (window.ISSOrbitPredictor) {
            window.ISSOrbitPredictor.fetchAndPredict();
        }
    });
</script>

</body>
</html>
