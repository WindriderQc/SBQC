<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('partials/mainHead', { title: 'SBQC ISS Tracker' }) %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/satellite.js/4.0.0/satellite.min.js"></script>

  

       
</head>

<body class="fixed-nav sticky-footer bg-light sidenav-toggled" id="page-top">

<%- include('partials/nav') %>

<div class="content-wrapper">
<div class="container-fluid bg-3 text-center">
    <!-- Begin Container -->

    <div class="card mb-3">
        <div class="card-header">3D ISS Viewer</div>
        <div class="card-body" style="padding: 0;">
            <div id="sketch-holder-wrapper" style="position: relative; width: 100%; max-width: 1280px; margin: 0 auto; background-color: #343a40;">
                <div id="sketch-holder" style="width: 100%; height: auto; display: flex; justify-content: center; align-items: center;">
                    <!-- p5.js canvas will be parented here -->
                </div>
                <!-- Pass-by overlay: appears on top of the map, right under the card title -->
                <div id="passby-overlay" style="position: absolute; top: 8px; left: 50%; transform: translateX(-50%); z-index: 1101; background: rgba(0,0,0,0.6); color: #fff; padding: 8px 12px; border-radius: 6px; font-size: 0.95em; display: flex; gap: 12px; align-items: center;">
                    <div>Next ISS pass-by: <span id="iss-passby-time">Calculating...</span></div>
                    <div style="font-size:0.85em; color:#ddd;">Loc: <span id="iss-target-loc">46.81, -71.21</span></div>
                    <button id="refresh-tle-btn" style="background:#007bff; color:#fff; border:none; padding:6px 8px; border-radius:4px; cursor:pointer; font-size:0.85em;">Refresh TLE</button>
                </div>
                <div id="controls-overlay" style="position: absolute; top: 10px; left: 10px; background-color: transparent; padding: 12px; border-radius: 6px; z-index: 1000; width: auto; min-width: 250px;">
                    <div style="margin-bottom: 8px;">
                        <label for="pathLengthSlider" style="font-size: 0.85em; display: block; margin-bottom: 2px;">Hist. Path: <span id="pathLengthValue">4200</span> pts</label>
                        <input type="range" id="pathLengthSlider" min="100" max="4200" step="100" value="4200" style="width: 100%; margin-top: -2px;">
                    </div>
                    <div style="margin-bottom: 8px;">
                        <label for="predictionLengthSlider" style="font-size: 0.85em; display: block; margin-bottom: 2px;">Pred. Length: <span id="predictionLengthValue">15</span> min</label>
                        <input type="range" id="predictionLengthSlider" min="5" max="360" step="5" value="15" style="width: 100%; margin-top: -2px;">
                    </div>
                    <div>
                        <label for="passByRadiusSlider" style="font-size: 0.85em; display: block; margin-bottom: 2px;">Detect Radius: <span id="passByRadiusValue">1500</span> km</label>
                        <input type="range" id="passByRadiusSlider" min="250" max="3000" step="50" value="1500" style="width: 100%; margin-top: -2px;">
                    </div>
                    <hr style="border-top: 1px solid rgba(255,255,255,0.2); margin-top: 8px; margin-bottom: 8px;">
                    <div style="font-size: 0.85em;">
                        <div style="margin-bottom: 4px;">
                            <input type="checkbox" id="showIssHistoricalPath" checked>
                            <label for="showIssHistoricalPath" style="margin-left: 4px;">Show Hist. Path</label>
                        </div>
                        <div style="margin-bottom: 4px;">
                            <input type="checkbox" id="showIssPredictedPath" checked>
                            <label for="showIssPredictedPath" style="margin-left: 4px;">Show Pred. Path</label>
                        </div>
                        <div>
                            <input type="checkbox" id="showQuakes" checked>
                            <label for="showQuakes" style="margin-left: 4px;">Show Quakes</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer small text-muted">Press 'S' to save canvas to PNG.</div>
    </div>

    <div class="card mb-3" style="max-width: 1280px; margin: 0 auto;">
        <div class="card-header">Controls & Info</div>
        <div class="card-body">
            <p>ISS Location - Latitude: <span id="isslat">N/A</span>&deg;, Longitude: <span id="isslon">N/A</span>&deg;</p>
            <p>Client Location - Latitude: <span id="clat">N/A</span>&deg;, Longitude: <span id="clon">N/A</span>&deg;</p>
            <p id="default-location-msg" style="font-size: 0.8em; color: #777; display: none;">Using default client location as live geolocation is unavailable or denied.</p>

            <div style="padding: 10px; text-align: left; border-top: 1px solid #eee;">
                <strong>Pass Details:</strong>
                <p>Entry Time: <span id="pass-entry-time">N/A</span></p>
                <p>Exit Time: <span id="pass-exit-time">N/A</span></p>
            </div>

            <div style="padding: 10px; text-align: left; border-top: 1px solid #eee;">
                <strong>Legend (3D View):</strong>
                <div style="margin-top: 5px;">
                    <span style="background-color: orange; display: inline-block; width: 20px; height: 10px; margin-right: 5px; border: 1px solid #555;"></span> Historical ISS Path
                </div>
                 <div style="margin-top: 5px;">
                    <span style="background-color: #00FF00; display: inline-block; width: 20px; height: 10px; margin-right: 5px; border: 1px solid #555;"></span> Predicted ISS Path
                </div>
                <div style="margin-top: 5px;">
                    <span style="background-color: yellow; display: inline-block; width: 10px; height: 10px; margin-right: 5px; border: 1px solid #555; border-radius: 50%;"></span> Default Location (Quebec City)
                </div>
                 <div style="margin-top: 5px;">
                    <span style="background-color: rgba(0,100,255,0.3); display: inline-block; width: 20px; height: 10px; margin-right: 5px; border: 1px solid #555;"></span> Pass-by Detection Radius
                </div>
                <div style="margin-top: 5px;">
                    <span style="background-color: teal; display: inline-block; width: 10px; height: 10px; margin-right: 5px; border: 1px solid #555; border-radius: 50%;"></span> Point of Closest Approach (if detected)
                </div>
                <div style="margin-top: 5px;">
                    <span style="background-color: green; display: inline-block; width: 7px; height: 7px; margin-right: 5px; border: 1px solid #555; border-radius: 50%;"></span> End of Predicted Path
                </div>
            </div>

            <div style="padding: 10px; text-align: left; border-top: 1px solid #eee;">
                <strong>Quake Appearance:</strong>
                <div style="margin-top: 5px;">
                    <label for="quakeFromColor">From Color:</label>
                    <input type="color" id="quakeFromColor" value="#00FF00"> <!-- Default Green -->
                </div>
                <div style="margin-top: 5px;">
                    <label for="quakeToColor">To Color:</label>
                    <input type="color" id="quakeToColor" value="#FF0000"> <!-- Default Red -->
                </div>
                <div style="margin-top: 5px;">
                    <label for="quakeMagFactor">Magnitude Factor: <span id="quakeMagFactorValue">1.0</span></label>
                    <input type="range" id="quakeMagFactor" min="0.1" max="5" step="0.1" value="1.0" style="width: 100%;">
                </div>
                <small style="display: block; margin-top: 8px;">
                    Note: Quake color transitions from 'From Color' to 'To Color' based on magnitude. 'Magnitude Factor' affects the size of the quake spheres.
                </small>
            </div>

            <div style="padding: 10px; text-align: left; border-top: 1px solid #eee;">
                <%# Slider content was moved to the overlay %>
            </div>
        </div>
        <div class="card-footer small text-muted">
            <a href="https://eyes.nasa.gov/apps/solar-system/#/home" target="_blank" class="btn btn-outline-primary">Explore with NASA Eyes</a>
        </div>
         <div class="card-footer small text-muted">
            <a href="/earthmap" target="_blank" class="btn btn-outline-primary">2D leaflet map</a>
        </div>
    </div>

    <!-- Next pass-by display moved to overlay on top of 3D viewer -->

    <div class="card mb-3">
        <div class="card-body">
            <div class="row mb-4">
                <div class="col">
                    <div>Wind Speed: <span id="wind-speed">N/A</span> m/s</div>
                    <div>Wind Gust: <span id="wind-gust">N/A</span> m/s</div>
                        <p>
                            At location: <span id="summary">N/A</span> with a temperature of <span id="temp">N/A</span>&deg; C. <br>
                            Air Quality (<span id="aq_parameter">N/A</span>): <span id="aq_value">N/A</span> <span id="aq_units"></span>
                            <small>(Last read on <span id="aq_date">N/A</span>)</small>
                        </p>
                </div>
            </div>
            <div class="row">
                <%- include('partials/tides') %>
            </div>
            <hr>
            <div class="row">
                <%- include('partials/pressureGraph') %>
            </div>
        </div>
    </div>
    <%# Removed <div id="ip_id"></div> %>
</div>
</div>
</div>

<%- include('partials/footer') %> <%# This should load tools.js %>
<script src="/socket.io/socket.io.js"></script>
<%- include('partials/p5') %>
<%# <script src="/js/tools.js"></script> <!-- REMOVED - Loaded in footer --> %>
<script src="/js/issOrbitPredictor.js"></script>
<script src="/js/issDetector.js"></script>

<script>
    // Page UI and Socket.IO Logic

    let clientLat = null;
    let clientLon = null;

    // let pagePredictedIssPathPoints = []; // Now managed by ISSOrbitPredictor

    let lastPassByCheckTime = 0;
    const PASS_BY_CHECK_INTERVAL = 30000;

    // let PASS_BY_THRESHOLD_KM = 1000; // Now managed by ISSOrbitPredictor (as radiusKM)
    // let predictionDurationSeconds = 15 * 60; // Now managed by ISSOrbitPredictor

    const socket = io();

    socket.on('connect', () => {
        console.log('Connected to server via Socket.IO');
    });

    socket.on('iss', (data) => {
        window.iss = data;

        if (document.getElementById('isslat') && document.getElementById('isslon')) {
            document.getElementById('isslat').textContent = parseFloat(data.latitude).toFixed(2);
            document.getElementById('isslon').textContent = parseFloat(data.longitude).toFixed(2);
        }

        const now = Date.now();
        if (clientLat !== null && clientLon !== null && now - lastPassByCheckTime > PASS_BY_CHECK_INTERVAL) {
            // calculateAndDisplayPassBy(); // Old function, will be replaced by ISSOrbitPredictor logic
            // For now, prediction is triggered by sliders or initially.
            // To trigger on interval, ISSOrbitPredictor.fetchAndPredict() could be called here.
            // However, TLE fetching on interval might be too frequent.
            // The current ISSOrbitPredictor design re-predicts if parameters change via sliders.
            // A separate timer for fetchAndPredict() might be better if periodic refresh is needed.
            // For this step, we rely on initial call and slider changes.
            if (window.ISSOrbitPredictor) {
                // This will refetch TLE and predict. Consider if this is too frequent.
                // window.ISSOrbitPredictor.fetchAndPredict();
            }
            lastPassByCheckTime = now;
        }
    });

    async function fetchWeatherForCoords(lat, lon) {
        if (!lat || !lon) return;
        const url = `/api/weather/${lat},${lon}`;
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Weather API request failed with status ${response.status}`);
            const data = await response.json();
            document.getElementById('summary').textContent = data.weather.weather[0].description;
            document.getElementById('temp').textContent = data.weather.main.feels_like.toFixed(1);
            if (data.air_quality && data.air_quality.results && data.air_quality.results[0] && data.air_quality.results[0].latest) {
                const air = data.air_quality.results[0];
                document.getElementById('aq_parameter').textContent = air.parameter ? air.parameter.displayName : 'N/A';
                document.getElementById('aq_value').textContent = air.latest.value;
                document.getElementById('aq_units').textContent = air.parameter ? air.parameter.units : '';
                document.getElementById('aq_date').textContent = air.latest.datetime && air.latest.datetime.local ? air.latest.datetime.local : 'N/A';
            } else { document.getElementById('aq_value').textContent = 'NO READING'; }
            const wind = data.weather.wind;
            document.getElementById('wind-speed').textContent = wind.speed;
            document.getElementById('wind-gust').textContent = wind.gust || 'N/A';
        } catch (e) {
            console.error('Error fetching weather data:', e);
            document.getElementById('summary').textContent = 'Error';
            document.getElementById('temp').textContent = 'N/A';
            document.getElementById('aq_value').textContent = 'NO READING';
        }
    }

    async function setDefaultLocationAndFetchWeather() {
        console.log("Using default client location (Quebec City area).");

        clientLat = 46.8139; clientLon = -71.2080;

        document.getElementById('clat').textContent = clientLat.toFixed(2);
        document.getElementById('clon').textContent = clientLon.toFixed(2);
        document.getElementById('default-location-msg').style.display = 'block';
        await fetchWeatherForCoords(clientLat, clientLon);
        // Update ISS predictor target and refresh prediction for the chosen/default location
        if (window.ISSOrbitPredictor && typeof window.ISSOrbitPredictor.setTargetLatLon === 'function') {
            window.ISSOrbitPredictor.setTargetLatLon(clientLat, clientLon);
            // fetchAndPredict will be called by setTargetLatLon via calculateFullPredictionAndDeterminePass
        }
        // Update overlay display immediately
        const targetLocSpan_def = document.getElementById('iss-target-loc');
        if (targetLocSpan_def) targetLocSpan_def.textContent = `${clientLat.toFixed(2)}, ${clientLon.toFixed(2)}`;
    }

    async function updateGeoData() {
        if (typeof Tools === 'undefined' || !Tools.isGeoLocAvailable || !Tools.geoLocate) {
            console.log("Tools.js not available or complete. Using default location.");
            await setDefaultLocationAndFetchWeather(); return;
        }
        if (!Tools.isGeoLocAvailable()) {

            console.log("Geolocation not available in this browser.");
            await setDefaultLocationAndFetchWeather(); return;
        }
        try {
            console.log("Attempting to get live geolocation...");
            const { coords } = await Tools.geoLocate();

            clientLat = coords.latitude; clientLon = coords.longitude;
            console.log("Live geolocation successful:", clientLat, clientLon);
            document.getElementById('default-location-msg').style.display = 'none';
            document.getElementById('clat').textContent = clientLat.toFixed(2);
            document.getElementById('clon').textContent = clientLon.toFixed(2);
            await fetchWeatherForCoords(clientLat, clientLon);
            // Update ISS predictor target to the live client location and recalculate
            if (window.ISSOrbitPredictor && typeof window.ISSOrbitPredictor.setTargetLatLon === 'function') {
                window.ISSOrbitPredictor.setTargetLatLon(clientLat, clientLon);
            }
            // Update overlay display immediately
            const targetLocSpan_live = document.getElementById('iss-target-loc');
            if (targetLocSpan_live) targetLocSpan_live.textContent = `${clientLat.toFixed(2)}, ${clientLon.toFixed(2)}`;
        } catch (e) {
            console.warn('Error getting live geolocation or permission denied:', e.message);
            await setDefaultLocationAndFetchWeather();
        }
    }

// calculateAndDisplayPassBy() function is now removed and replaced by ISSOrbitPredictor module.

    document.addEventListener('DOMContentLoaded', () => {
        updateGeoData();

        const pathLengthSlider = document.getElementById('pathLengthSlider');
        const pathLengthValueSpan = document.getElementById('pathLengthValue');
        const predictionLengthSlider = document.getElementById('predictionLengthSlider');
        const predictionLengthValueSpan = document.getElementById('predictionLengthValue');
        const passByRadiusSlider = document.getElementById('passByRadiusSlider');
        const passByRadiusValueSpan = document.getElementById('passByRadiusValue');

        if (pathLengthSlider && pathLengthValueSpan) {
            pathLengthSlider.addEventListener('input', function() {
                pathLengthValueSpan.textContent = this.value;
                if (window.earth3DSketch && typeof window.earth3DSketch.setMaxHistoryPoints === 'function') {
                    window.earth3DSketch.setMaxHistoryPoints(parseInt(this.value));
                }
                // calculateAndDisplayPassBy(); // Old function call removed
                // Prediction is handled by ISSOrbitPredictor setters or its internal logic
            });
        }

        if (predictionLengthSlider && predictionLengthValueSpan) {
            predictionLengthSlider.addEventListener('input', function() {
                predictionLengthValueSpan.textContent = this.value;
                // predictionDurationSeconds = parseInt(this.value) * 60; // Old variable
                if (window.ISSOrbitPredictor) {
                    window.ISSOrbitPredictor.setPredictionDurationSec(parseInt(this.value) * 60);
                }
                // calculateAndDisplayPassBy(); // Old function call removed
            });
        }

        if (passByRadiusSlider && passByRadiusValueSpan) {
            passByRadiusSlider.addEventListener('input', function() {
                passByRadiusValueSpan.textContent = this.value;
                // PASS_BY_THRESHOLD_KM = parseInt(this.value); // Old variable for calculation
                if (window.ISSOrbitPredictor) {
                    window.ISSOrbitPredictor.setRadiusKM(parseInt(this.value));
                }
                if (window.earth3DSketch && typeof window.earth3DSketch.setSketchPassByRadiusKM === 'function') {
                    window.earth3DSketch.setSketchPassByRadiusKM(parseInt(this.value));
                }
                // calculateAndDisplayPassBy(); // Old function call removed
            });
        }

        if (window.ISSOrbitPredictor) {
            window.ISSOrbitPredictor.fetchAndPredict();
        }

        // Set overlay target location if predictor is ready
        const targetLocSpan = document.getElementById('iss-target-loc');
        if (window.ISSOrbitPredictor && typeof window.ISSOrbitPredictor.getTargetLatLon === 'function' && targetLocSpan) {
            const t = window.ISSOrbitPredictor.getTargetLatLon();
            targetLocSpan.textContent = `${t.lat.toFixed(2)}, ${t.lon.toFixed(2)}`;
        }

        const refreshBtn = document.getElementById('refresh-tle-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', async function() {
                const passSpan = document.getElementById('iss-passby-time');
                const origText = passSpan ? passSpan.textContent : '';
                if (passSpan) passSpan.textContent = 'Refreshing TLE...';
                this.disabled = true;
                this.textContent = 'Refreshing...';
                try {
                    if (window.ISSOrbitPredictor && typeof window.ISSOrbitPredictor.refreshTLE === 'function') {
                        const ok = await window.ISSOrbitPredictor.refreshTLE();
                        if (!ok && passSpan) passSpan.textContent = 'Failed to refresh TLE';
                        // Update overlay target loc after refresh
                        if (window.ISSOrbitPredictor && typeof window.ISSOrbitPredictor.getTargetLatLon === 'function' && targetLocSpan) {
                            const t = window.ISSOrbitPredictor.getTargetLatLon();
                            targetLocSpan.textContent = `${t.lat.toFixed(2)}, ${t.lon.toFixed(2)}`;
                        }
                    }
                } catch (e) {
                    console.error('Error refreshing TLE:', e);
                } finally {
                    this.disabled = false;
                    this.textContent = 'Refresh TLE';
                    // restore pass text if it still says 'Refreshing...'
                    if (passSpan && passSpan.textContent === 'Refreshing TLE...') passSpan.textContent = origText;
                }
            });
        }

        // Quake appearance controls
        const quakeFromColorInput = document.getElementById('quakeFromColor');
        const quakeToColorInput = document.getElementById('quakeToColor');
        const quakeMagFactorInput = document.getElementById('quakeMagFactor');
        const quakeMagFactorValueSpan = document.getElementById('quakeMagFactorValue');

        if (quakeFromColorInput) {
            quakeFromColorInput.addEventListener('input', function() {
                if (window.earth3DSketch && typeof quakeFromColor !== 'undefined') {
                    // p5.js color function is available in the global scope of the sketch
                    // but earth3D.js's setup() initializes quakeFromColor.
                    // We need to update that specific variable.
                    // Direct assignment might be tricky if earth3D.js is not fully loaded or
                    // if p5 instance is not directly accessible here in the same way.
                    // A robust way is to expose a setter in earth3DSketch object.
                    // For now, assuming direct update works or will be refined.
                    // Let's create new p5.Color objects from the hex value.
                    // This assumes p5 is loaded and `color()` is available globally.
                    try {
                        let newColor = color(this.value); // p5.color()
                        newColor.setAlpha(150); // Keep original alpha
                        quakeFromColor = newColor; // Update global in earth3D.js
                         if (typeof redraw === 'function') redraw(); // Redraw sketch
                    } catch (e) {
                        console.error("Error creating color for quakeFromColor:", e);
                    }
                }
            });
        }

        if (quakeToColorInput) {
            quakeToColorInput.addEventListener('input', function() {
                if (window.earth3DSketch && typeof quakeToColor !== 'undefined') {
                     try {
                        let newColor = color(this.value); // p5.color()
                        newColor.setAlpha(150); // Keep original alpha
                        quakeToColor = newColor; // Update global in earth3D.js
                        if (typeof redraw === 'function') redraw(); // Redraw sketch
                    } catch (e) {
                        console.error("Error creating color for quakeToColor:", e);
                    }
                }
            });
        }

        if (quakeMagFactorInput && quakeMagFactorValueSpan) {
            quakeMagFactorInput.addEventListener('input', function() {
                quakeMagFactorValueSpan.textContent = this.value;
                if (window.earth3DSketch && typeof quakeMagFactor !== 'undefined') {
                    quakeMagFactor = parseFloat(this.value); // Update global in earth3D.js
                    if (typeof redraw === 'function') redraw(); // Redraw sketch
                }
            });
        }

        // Visibility checkbox handlers
        const showIssHistoricalPathCheckbox = document.getElementById('showIssHistoricalPath');
        const showIssPredictedPathCheckbox = document.getElementById('showIssPredictedPath');
        const showQuakesCheckbox = document.getElementById('showQuakes');

        if (showIssHistoricalPathCheckbox) {
            showIssHistoricalPathCheckbox.addEventListener('change', function() {
                if (window.earth3DSketch && typeof window.earth3DSketch.setShowIssHistoricalPath === 'function') {
                    window.earth3DSketch.setShowIssHistoricalPath(this.checked);
                }
            });
        }

        if (showIssPredictedPathCheckbox) {
            showIssPredictedPathCheckbox.addEventListener('change', function() {
                if (window.earth3DSketch && typeof window.earth3DSketch.setShowIssPredictedPath === 'function') {
                    window.earth3DSketch.setShowIssPredictedPath(this.checked);
                }
            });
        }

        if (showQuakesCheckbox) {
            showQuakesCheckbox.addEventListener('change', function() {
                if (window.earth3DSketch && typeof window.earth3DSketch.setShowQuakes === 'function') {
                    window.earth3DSketch.setShowQuakes(this.checked);
                }
            });
        }
    });
</script>

</body>
</html>
