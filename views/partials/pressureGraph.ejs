<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.min.js"></script>

<h1>Barometric Pressure</h1>
 <p id="currentPressure">Current Pressure: N/A<span id="pressureDataSourceMessage" style="font-size: 0.8em; margin-left: 10px;"></span></p>
<div style="position: relative; width: 1024px; height: 400px; margin-bottom: 20px;">
    <canvas id="pressureChart" style="position: absolute; z-index: 1;" width="1024" height="400"></canvas>
</div>

<div id="pressureControls" style="margin-top: 20px;">
    <label for="pressureLatitude">Latitude:</label>
    <input type="number" id="pressureLatitude" name="pressureLatitude" value="46.8139" step="any">
    <label for="pressureLongitude">Longitude:</label>
    <input type="number" id="pressureLongitude" name="pressureLongitude" value="-71.2082" step="any">
    <button id="refreshPressure">Refresh Pressure</button>
    <small style="margin-left: 10px;">(Displays ~2 days historical and ~2 days forecast pressure)</small>
</div>

<script>
    // pressureData and tempData will now be arrays of values for the chart
    // pressureTimes will be the labels (timestamps)
    let pressureValues = [];
    let tempValues = [];
    let chartTimeLabels = [];
    let pressureChartInstance; 

    async function fetchPressureData(lat = 46.8139, lon = -71.2082) {
        let serverResponse; 
        const cacheKey = `pressureData-${lat}-${lon}`;
        const lastFetchedKey = `lastFetchedPressure-${lat}-${lon}`;
        const cachedData = localStorage.getItem(cacheKey);
        const lastFetched = localStorage.getItem(lastFetchedKey);

        if (cachedData && moment().diff(moment(lastFetched), 'minutes') < 30) {
            serverResponse = JSON.parse(cachedData);
            console.log('Fetching cached pressure/temp data:', serverResponse);
        } else {
            console.log(`Fetching API pressure/temp data for lat: ${lat}, lon: ${lon}`);
            try {
                const response = await fetch(`/api/pressure?lat=${lat}&lon=${lon}`);
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ error: response.statusText }));
                    console.error('Error fetching pressure/temp:', errorData.error || response.statusText);
                    alert(`Error fetching pressure/temp: ${errorData.error || response.statusText}`);
                    displayPressureChartError(`Failed to load data: ${errorData.error || response.statusText}`);
                    return;
                }
                serverResponse = await response.json();
                localStorage.setItem(cacheKey, JSON.stringify(serverResponse));
                localStorage.setItem(lastFetchedKey, moment().toISOString());
            } catch (error) {
                console.error('Network error or JSON parsing error fetching pressure/temp:', error);
                alert('Failed to fetch pressure/temp data. Please check your network connection.');
                displayPressureChartError('Network error or server issue.');
                return;
            }
        }

        const dataSourceMessageEl = document.getElementById('pressureDataSourceMessage');
        if (dataSourceMessageEl) { // Create this element if you want to show the message
            if (serverResponse.data_source === "mock") {
                dataSourceMessageEl.textContent = " (Warning: Displaying mock data due to API issue)";
                dataSourceMessageEl.style.color = "orange";
            } else {
                dataSourceMessageEl.textContent = "";
            }
        }


        if (serverResponse && serverResponse.readings && serverResponse.readings.length > 0) {
            pressureValues = serverResponse.readings.map(r => r.pressure);
            tempValues = serverResponse.readings.map(r => r.temp);
            chartTimeLabels = serverResponse.readings.map(r => moment.unix(r.dt).toDate());
            
            const nowUnix = moment().unix();
            let closestReading = serverResponse.readings[0];
            for (const reading of serverResponse.readings) {
                if (reading.dt <= nowUnix) {
                    closestReading = reading;
                } else {
                    if (closestReading.dt > nowUnix) {
                        if (reading.dt < closestReading.dt) closestReading = reading;
                    }
                    break; 
                }
            }
            document.getElementById('currentPressure').textContent = 
                `Pressure: ${closestReading.pressure.toFixed(1)} hPa, Temp: ${closestReading.temp.toFixed(1)} 째C (at ${moment.unix(closestReading.dt).format('HH:mm')})`;

            const ctx = document.getElementById('pressureChart').getContext('2d');
            if (pressureChartInstance) {
                pressureChartInstance.destroy();
            }

            pressureChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: chartTimeLabels,
                    datasets: [
                        {
                            label: 'Barometric Pressure (hPa)',
                            data: pressureValues,
                            borderColor: 'blue',
                            borderWidth: 2,
                            pointRadius: 1,
                            fill: false, // No fill for pressure to see temp line better
                            yAxisID: 'y-axis-pressure',
                        },
                        {
                            label: 'Temperature (째C)',
                            data: tempValues,
                            borderColor: 'red',
                            borderWidth: 2,
                            pointRadius: 1,
                            fill: false,
                            yAxisID: 'y-axis-temp',
                        }
                    ]
                },
                options: {
                    responsive: false, // Keep as is from original
                    scales: {
                        xAxes: [{
                            type: 'time',
                            time: {
                                tooltipFormat: 'ddd D MMM HH:mm',
                                unit: 'hour',
                                displayFormats: { hour: 'MMM D, HH:mm' }
                            },
                            ticks: {
                                callback: function(value, index, values) {
                                    if (values && values[index] && typeof values[index].value === 'number') {
                                        return moment(values[index].value).format('MMM D, HH:mm');
                                    }
                                    return moment(value).format('MMM D, HH:mm');
                                }
                            }
                        }],
                        yAxes: [
                            {
                                id: 'y-axis-pressure',
                                type: 'linear',
                                position: 'left',
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Pressure (hPa)'
                                }
                            },
                            {
                                id: 'y-axis-temp',
                                type: 'linear',
                                position: 'right',
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Temperature (째C)'
                                },
                                gridLines: { // Optional: disable grid lines for the second axis if too cluttered
                                    drawOnChartArea: false, 
                                }
                            }
                        ]
                    },
                    tooltips: { // For Chart.js v2.9.4
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(tooltipItem, data) {
                                let label = data.datasets[tooltipItem.datasetIndex].label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += parseFloat(tooltipItem.value).toFixed(1);
                                if (tooltipItem.datasetIndex === 0) label += ' hPa';
                                if (tooltipItem.datasetIndex === 1) label += ' 째C';
                                return label;
                            }
                        }
                    },
                    annotation: { // Keep existing annotation for "Now" line
                        annotations: [{
                            type: 'line',
                            mode: 'vertical',
                            scaleID: 'x-axis-0', // Ensure this matches your xAxis ID if specified
                            value: moment().toDate(),
                            borderColor: 'green',
                            borderWidth: 2,
                            label: {
                                content: 'Now',
                                enabled: true,
                                position: 'top'
                            }
                        }]
                    }
                }
            });
        } else {
            console.log('No pressure/temp data to display or error in data structure.');
            const message = (serverResponse && serverResponse.message) ? serverResponse.message : 'No pressure/temp data available.';
            displayPressureChartError(message);
            document.getElementById('currentPressure').textContent = 'Pressure & Temp: N/A';
        }
    }

    function displayPressureChartError(message) { 
        if (pressureChartInstance) {
            pressureChartInstance.destroy();
            pressureChartInstance = null;
        }
        const ctx = document.getElementById('pressureChart').getContext('2d');
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clear canvas
        ctx.font = "16px Arial";
        ctx.fillStyle = "black";
        ctx.textAlign = "center";
        ctx.fillText(message, ctx.canvas.width / 2, ctx.canvas.height / 2);
    }


    // Event listener for the refresh button
    document.getElementById('refreshPressure').addEventListener('click', () => {
        const lat = parseFloat(document.getElementById('pressureLatitude').value);
        const lon = parseFloat(document.getElementById('pressureLongitude').value);
        // const days = parseInt(document.getElementById('pressureDays').value, 10); // Days input removed

        if (isNaN(lat) || isNaN(lon)) { // Removed days check
            alert('Please enter valid numbers for latitude and longitude for pressure.');
            return;
        }
        // if (days < 1 || days > 7) { // Days input removed
        //     alert('Please enter a value between 1 and 7 for days for pressure.');
        //     return;
        // }
        fetchPressureData(lat, lon); // Removed 'days' from call
    });

    // Initial data fetch on page load
    // Add a small delay to ensure the page is fully loaded and other scripts (if any) have run
    document.addEventListener('DOMContentLoaded', () => {
        // Initial fetch for default values
        fetchPressureData(); 
    });

</script>
