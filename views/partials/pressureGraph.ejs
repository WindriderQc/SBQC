<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.min.js"></script>

<h1>Barometric Pressure</h1>
<p id="currentPressure">Current Pressure: N/A</p>
<div style="position: relative; width: 1024px; height: 400px; margin-bottom: 20px;">
    <canvas id="pressureChart" style="position: absolute; z-index: 1;" width="1024" height="400"></canvas>
</div>

<div id="pressureControls" style="margin-top: 20px;">
    <label for="pressureLatitude">Latitude:</label>
    <input type="number" id="pressureLatitude" name="pressureLatitude" value="46.8139" step="any">
    <label for="pressureLongitude">Longitude:</label>
    <input type="number" id="pressureLongitude" name="pressureLongitude" value="-71.2082" step="any">
    <button id="refreshPressure">Refresh Pressure</button>
    <small style="margin-left: 10px;">(Displays ~2 days historical and ~2 days forecast pressure)</small>
</div>

<script>
    let pressureData = [];
    let pressureTimes = [];
    let pressureChartInstance; // To store the chart instance for updates

    // Function to fetch data from the backend
    async function fetchPressureData(lat = 46.8139, lon = -71.2082) { // Removed 'days' parameter
        let data;
        // Updated cacheKey to not include days, as the server now determines the range.
        // However, client-side caching might still be useful for immediate re-renders if lat/lon haven't changed.
        // For simplicity with server-defined range, we can rely more on browser caching of the API request itself,
        // or adjust client cache key if we want to keep it distinct per lat/lon.
        // Let's make the client cache key simpler for now.
        const cacheKey = `pressureData-${lat}-${lon}`;
        const lastFetchedKey = `lastFetchedPressure-${lat}-${lon}`;

        // Try to get cached data
        const cachedData = localStorage.getItem(cacheKey);
        const lastFetched = localStorage.getItem(lastFetchedKey);

        // Cache duration: 30 minutes for pressure data
        if (cachedData && moment().diff(moment(lastFetched), 'minutes') < 30) { // Client cache still 30 mins
            data = JSON.parse(cachedData);
            console.log('Fetching cached pressure data:', data);
        } else {
            console.log(`Fetching API pressure data for lat: ${lat}, lon: ${lon}`); // Removed 'days' from log
            try {
                const response = await fetch(`/api/pressure?lat=${lat}&lon=${lon}`); // Removed 'days' from URL
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ error: response.statusText }));
                    console.error('Error fetching pressure:', errorData.error || response.statusText);
                    alert(`Error fetching pressure: ${errorData.error || response.statusText}`);
                    // Display error on chart area
                    displayPressureChartError(`Failed to load data: ${errorData.error || response.statusText}`);
                    return;
                }
                data = await response.json();

                // Cache the data
                localStorage.setItem(cacheKey, JSON.stringify(data));
                localStorage.setItem(lastFetchedKey, moment().toISOString());
            } catch (error) {
                console.error('Network error or JSON parsing error fetching pressure:', error);
                alert('Failed to fetch pressure data. Please check your network connection.');
                // Display error on chart area
                displayPressureChartError('Network error or server issue.');
                return;
            }
        }

        if (data && data.readings && data.readings.length > 0) {
            // Assuming data.readings is an array of objects like { dt: timestamp_sec, pressure: value_hpa }
            pressureData = data.readings.map(r => r.pressure);
            pressureTimes = data.readings.map(r => moment.unix(r.dt).toDate());

            if (data.readings.length > 0) {
                // Update currentPressure display logic
                const nowUnix = moment().unix();
                let closestReading = data.readings[0];
                // Find the most recent reading that is not in the future,
                // or the first future reading if all are in the future (less likely with historical data)
                // or the last reading if all are in the past.
                for (const reading of data.readings) {
                    if (reading.dt <= nowUnix) {
                        closestReading = reading; // Keep updating to get the latest past/current
                    } else {
                        // If this reading is future, and previous 'closestReading' was past,
                        // then 'closestReading' is the best one.
                        // If 'closestReading' is also future (e.g. all data is forecast), pick the earliest future.
                        if (closestReading.dt > nowUnix) { // current closestReading is already future
                           if (reading.dt < closestReading.dt) closestReading = reading; // found an earlier future
                        }
                        break; // Stop once we are past 'now' and have the latest past/current or earliest future
                    }
                }
                 document.getElementById('currentPressure').textContent = `Pressure: ${closestReading.pressure.toFixed(1)} hPa (at ${moment.unix(closestReading.dt).format('HH:mm')})`;
            } else {
                document.getElementById('currentPressure').textContent = 'Pressure: N/A';
            }

            const ctx = document.getElementById('pressureChart').getContext('2d');

            if (pressureChartInstance) {
                pressureChartInstance.destroy();
            }

            pressureChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: pressureTimes,
                    datasets: [{
                        label: 'Barometric Pressure (hPa)',
                        data: pressureData,
                        borderColor: 'blue', // Different color from tides
                        borderWidth: 2,
                        pointRadius: 1,
                        fill: true,
                        backgroundColor: 'rgba(0, 0, 255, 0.1)'
                    }]
                },
                options: {
                    responsive: false,
                    scales: {
                        xAxes: [{
                            type: 'time',
                            time: {
                                tooltipFormat: 'ddd D MMM HH:mm',
                                unit: 'hour',
                                displayFormats: {
                                    hour: 'HH:mm' // Shorter format for time axis
                                }
                            },
                             ticks: {
                                callback: function(value, index, values) {
                                    if (values && values[index] && typeof values[index].value === 'number') {
                                        return moment(values[index].value).format('MMM D, HH:mm');
                                    }
                                    return moment(value).format('MMM D, HH:mm');
                                }
                            }
                        }],
                        yAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: 'Pressure (hPa)'
                            }
                        }]
                    },
                    annotation: {
                        annotations: [{
                            type: 'line',
                            mode: 'vertical',
                            scaleID: 'x-axis-0',
                            value: moment().toDate(),
                            borderColor: 'green', // Different color for "Now" line
                            borderWidth: 2,
                            label: {
                                content: 'Now',
                                enabled: true,
                                position: 'top'
                            }
                        }]
                    }
                }
            });
        } else {
            console.log('No pressure data to display or error in data structure.');
            const message = (data && data.message) ? data.message : 'No pressure data available for the selected parameters.';
            displayPressureChartError(message);
            document.getElementById('currentPressure').textContent = 'Current Pressure: N/A';
        }
    }

    function displayPressureChartError(message) {
        if (pressureChartInstance) {
            pressureChartInstance.destroy();
            pressureChartInstance = null;
        }
        const ctx = document.getElementById('pressureChart').getContext('2d');
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clear canvas
        ctx.font = "16px Arial";
        ctx.fillStyle = "black";
        ctx.textAlign = "center";
        ctx.fillText(message, ctx.canvas.width / 2, ctx.canvas.height / 2);
    }


    // Event listener for the refresh button
    document.getElementById('refreshPressure').addEventListener('click', () => {
        const lat = parseFloat(document.getElementById('pressureLatitude').value);
        const lon = parseFloat(document.getElementById('pressureLongitude').value);
        // const days = parseInt(document.getElementById('pressureDays').value, 10); // Days input removed

        if (isNaN(lat) || isNaN(lon)) { // Removed days check
            alert('Please enter valid numbers for latitude and longitude for pressure.');
            return;
        }
        // if (days < 1 || days > 7) { // Days input removed
        //     alert('Please enter a value between 1 and 7 for days for pressure.');
        //     return;
        // }
        fetchPressureData(lat, lon); // Removed 'days' from call
    });

    // Initial data fetch on page load
    // Add a small delay to ensure the page is fully loaded and other scripts (if any) have run
    document.addEventListener('DOMContentLoaded', () => {
        // Initial fetch for default values
        fetchPressureData();
    });

</script>
