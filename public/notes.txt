sudo apt install openssh-server
sudo systemctl enable ssh   //  this insure service start at boot  (usually not necessary, done default at install.)
sudo systemctl start ssh

sudo sed -i '/preserve_hostname: false/c\preserve_hostname: true' /etc/cloud/cloud.cfg && sudo hostnamectl set-hostname flyingHQ     //  this will set the hostname and insure it stays onto cloud VM

FlyingHQ server:   ssh yb@104.129.129.22


/* Install node.js v15 */

curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
sudo apt install -y nodejs
  //  Test Node installation
node -v
node hello.js
curl http://localhost:3000





/*   Install Nginx    */

sudo apt update
sudo apt install -y nginx
cd /etc/nginx/sites-available
sudo xed default

ex:

            server {


                  location / {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  }

                  location /cams/babypi {
                  proxy_pass http://10.0.0.74:8081;
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection 'upgrade';
                        proxy_set_header Host $host;
                        proxy_cache_bypass $http_upgrade;

                  }

                  location /cams/keeper {
                  proxy_pass http://192.168.0.33:8081;
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection 'upgrade';
                        proxy_set_header Host $host;
                        proxy_cache_bypass $http_upgrade;

                  }

                  location /cams/blackpi {
                        proxy_pass http://192.168.0.252:8083;


                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection 'upgrade';
                        proxy_set_header Host $host;
                        proxy_cache_bypass $http_upgrade;

                  }

            }




 
 /*  Install Mosquitto    */ 

sudo apt install mosquitto
mosquitto -d     ->  -d Run mosquitto in the background as a daemon
yb@flyinghq:~$ mosquitto_sub -t "test"
mosquitto_pub -m "message from mosquitto_pub client" -t "test"

sudo mosquitto_passwd -c passwordfile user              -> Create passwordfile and add user
mosquitto_passwd -b passwordfile user password          -> to add user to the created password file
mosquitto_passwd -D passwordfile user                   -> to delete user

sudo nano /etc/mosquitto/mosquitto.conf   
ex:
      pid_file /var/run/mosquitto.pid

      allow_anonymous false
      password_file /etc/mosquitto/passwordfile

      listener 1883

      listener 9001
      protocol websockets

      persistence false

      log_dest file /var/log/mosquitto/mosquitto.log











Install MongoDB
---------------

Import the public key used by the package management system:
wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -

Create the /etc/apt/sources.list.d/mongodb-org-4.4.list file for Ubuntu 20.04 (Focal):
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list

Install:
sudo apt-get install -y mongodb-org

Start MongoDB:
sudo systemctl start mongod


Download and install MongoDB Compass:
https://downloads.mongodb.com/compass/mongodb-compass_1.24.6_amd64.deb

Link to connect to local DB in Compass:
mongodb://localhost:27017/?readPreference=primary&appname=MongoDB%20Compass&ssl=false

Link to connect to cloud MongoDB or local in node.js:
DB_CONNECTION=mongodb+srv://yb:!!!PASSWORD!!!@cluster0-b2xaf.mongodb.net/test?retryWrites=true&w=majority
DB_CONNECTION=mongodb://127.0.0.1:27017/IoT








  git clone  https://github.com/WindriderQc/iGrow.git
  npm install



  // Install PM2
sudo npm install pm2@latest -g
pm2 startup systemd   -> insure startup at boot
pm2 start server.js  --watch    -> replace hello.js by any application to be launched   watch = replace nodemon, this can be put in package.json

pm2 save
pm2 log
pm2 monitor





/*  Install Motion   */

sudo apt install -y motion

sudo nano /etc/motion/motion.conf

Find the following lines and make the following changes.  (Ctrl+W is search in nano)

daemon off -> daemon on (this will run allow the program to run as a service)
stream_localhost on -> stream_localhost off 

Now we need to enable the motion daemon by editing the motion file:
sudo nano /etc/default/motion
Make the following change:
start_motion_daemon=no -> start_motion_daemon=yes

Next we need to make sure the motion capture directory is writable

sudo chmod 777 /var/lib/motion

Now make sure the camera is connected and start the service with the command:

sudo service motion start








chrome://flags/#unsafely-treat-insecure-origin-as-secure


https://myaccount.google.com/lesssecureapps    ->  Must be on to allow using the gmail api from unsecure app.    should get back to https or remember to activate this.








ls ~/.ssh
ssh-keygen -t rsa -b 4096 -C "xxxx@hotmail.com"
sudo apt install xclip
xclip -sel clip < ~/.ssh/id_rsa.pub

log to github and paste ssh key in settings






find . -type f -iname \*.avi -delete

rm -r /path/to/dir/*        ( -f to force for protected files)

df                       // list all disk n space

ps -ef | grep node       //  list all node process running

node
require('crypto').randomBytes(64).toString('hex')   // Generate random key

nmap -sV -p 22 192.168.0.1-255























sudo nano /etc/samba/samba.conf
sudo service smbd restart




//set HDD to automount

sudo fdisk -l
sudo blkid

sudo mkdir /hdd  
sudo mkdir /nomdudisk     // mount point pour le HDD
sudo groupadd hdd
sudo usermod -aG hdd USERNAME 
sudo chown -R :hdd /nomdudisk
sudo nano /etc/fstab

add (avec le bon UUID):
UUID=14D82C19D82BF81E /hdd/nomdudisk    auto nosuid,nodev,nofail,x-gvfs-show 0 0

Pour tester: (ou reboot)
sudo mount -a









// Setup Platform.io

curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core/master/scripts/99-platformio-udev.rules | sudo tee /etc/udev/rules.d/99-platformio-udev.rules

sudo service udev restart
sudo usermod -a -G tty yb  -> required to allow USB comm
sudo addgroup yb dialout   -> required to allow USB comm
sudo addgroup yb tty       -> required to allow USB comm






//  RASPBERRY PI

The line below is used to turn off the power LED
sudo sh -c 'echo 0 > /sys/class/leds/led1/brightness'

The line below is used to turn off the action LED
sudo sh -c 'echo 0 > /sys/class/leds/led0/brightness'


add to /boot/config.txt
# Disable Ethernet LEDs
dtparam=eth_led0=14
dtparam=eth_led1=14

# Disable the PWR LED
dtparam=pwr_led_trigger=none
dtparam=pwr_led_activelow=off

# Disable the Activity LED
dtparam=act_led_trigger=none
dtparam=act_led_activelow=off







